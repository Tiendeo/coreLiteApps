// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.3 (swiftlang-1200.0.28.1 clang-1200.0.30.1)
// swift-module-flags: -target i386-apple-ios10.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name TiendeoCore
import AdSupport
import Alamofire
import AlamofireObjectMapper
import CoreData
import Foundation
import Governor
import Kingfisher
import MapKit
import ObjectMapper
import RxSwift
import Swift
import UIKit
public class GetNearestStoresById {
  public init(storesRepository: TiendeoCore.StoresRepository)
  public func execute(_ requestValues: TiendeoCore.GetNearestStoresRequestValues) -> RxSwift.Observable<[TiendeoCore.Store]>
  @objc deinit
}
public class GetNearestStoresRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(catalogId: Swift.String, lat: Swift.Float, lon: Swift.Float, start: Swift.Int, count: Swift.Int, countryCode: Swift.String)
  @objc deinit
}
public protocol LoyaltyCardsRepository {
  func getLoyaltyCards(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.LoyaltyCard]>
  func syncLoyaltyCards(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.LoyaltyCard]>
  func createLoyaltyCard(loyaltyCard: TiendeoCore.LoyaltyCard, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  func updateLoyaltyCard(loyaltyCard: TiendeoCore.LoyaltyCard, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  func deleteLoyaltyCard(with id: Swift.String) -> RxSwift.Observable<Swift.Bool>
  func getRecommendedLoyaltyCards(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.RecommendedLoyaltyCard]>
  func addPromoCouponUserWithLoyaltyCard(promoCouponUser: TiendeoCore.PromoCouponUser, loyaltyCard: TiendeoCore.LoyaltyCard, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  func deleteAllLoyaltyCards() -> RxSwift.Observable<Swift.Bool>
}
public class GetGlobalIntegrations {
  public init(configRepository: TiendeoCore.ConfigRepository)
  public func execute(_ requestValues: TiendeoCore.GetGlobalIntegrationsRequestValues) -> RxSwift.Observable<TiendeoCore.GlobalIntegrationsWrapper>
  @objc deinit
}
public class GetGlobalIntegrationsRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String)
  @objc deinit
}
public class GetCatalogsByRetailerIdAndClientStoreId {
  public init(storesRepository: TiendeoCore.StoresRepository)
  public func execute(_ requestValues: TiendeoCore.GetCatalogsByClientStoreIdRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  @objc deinit
}
public class GetCatalogsByClientStoreIdRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(retailerId: Swift.String, clientStoreId: Swift.String, countryCode: Swift.String)
  @objc deinit
}
public class AddFavorites {
  public init(favoritesRepository: TiendeoCore.FavoritesRepository)
  public func execute(_ requestValues: TiendeoCore.AddFavoritesRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class AddFavoritesRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(favorites: [TiendeoCore.Favorite], countryCode: Swift.String, appUserId: Swift.String)
  @objc deinit
}
public protocol RequestValues {
  var countryCode: Swift.String { get set }
}
public protocol BaseRequestValues {
}
public struct LoyaltyCardsRemoteDataSource : TiendeoCore.LoyaltyCardsDataSource {
  public init()
  public func getLoyaltyCards(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.LoyaltyCard]>
  public func rewriteLoyaltyCards(loyaltyCards: [TiendeoCore.LoyaltyCard], countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.LoyaltyCard]>
  public func getRecommendedLoyaltyCards(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.RecommendedLoyaltyCard]>
  public func deleteAllLoyaltyCards() -> RxSwift.Observable<Swift.Bool>
}
extension PromoCouponRemoteDataSource {
  public func getPromoCouponUser(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.PromoCouponUser]>
  public func addPromocouponUser(promoCouponUser: TiendeoCore.PromoCouponUser, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.PromoCouponUser>
  public func addPromoCouponsUser(promoCouponIds: [Swift.String], countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.PromoCouponUser]>
}
@_inheritsConvenienceInitializers @objc(PrintStatLocal) public class PrintStatLocal : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
public struct FavoritesDataRepository : TiendeoCore.FavoritesRepository {
  public init(remoteDataSource: TiendeoCore.FavoritesDataSource, localDataSource: TiendeoCore.FavoritesDataSource)
  public func getFavorites(countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<[TiendeoCore.Favorite]>
  public func addFavorites(favorites: [TiendeoCore.Favorite], countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<Swift.Bool>
  public func deleteFavoriteBy(favoriteId: Swift.String, countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<Swift.Bool>
  public func syncFavorites(countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<[TiendeoCore.Favorite]>
}
public class SendPrintStats {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SendPrintStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SendPrintStatsRequestValues : TiendeoCore.BaseRequestValues {
  public init()
  @objc deinit
}
public struct TiendeoCountry {
  public let countryCode: Swift.String
  public let governorCountry: Swift.String
  public let translationNameId: Swift.String
  public let countryName: Swift.String
  public let cityName: Swift.String
  public let defaultLat: Swift.Float
  public let defaultLon: Swift.Float
  public let flagUrl: Swift.String
  public init(countryCode: Swift.String, governorCountry: Swift.String, translationNameId: Swift.String, countryName: Swift.String, cityName: Swift.String, defaultLat: Swift.Float, defaultLon: Swift.Float, flagUrl: Swift.String)
}
public struct ShoppingList {
  public let id: Swift.String
  public let name: Swift.String
  public var checked: Swift.Bool
  public var timestamp: Swift.Double
  public var products: [TiendeoCore.Product]
  public init(id: Swift.String, name: Swift.String, checked: Swift.Bool, products: [TiendeoCore.Product], timestamp: Swift.Double)
}
public class SaveTagBox {
  public init(tagBoxesRepository: TiendeoCore.TagBoxesRepository)
  public func execute(_ requestValues: TiendeoCore.SaveTagBoxRequestValues) -> RxSwift.Observable<Swift.Bool?>
  @objc deinit
}
public class SaveTagBoxRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(tagBox: TiendeoCore.TagBox, countryCode: Swift.String)
  @objc deinit
}
extension LoyaltyCardsRemoteDataSource {
  public func syncLoyaltyCards(loyaltyCards: [TiendeoCore.LoyaltyCard], countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.LoyaltyCard]>
  public func createLoyaltyCard(loyaltyCard: TiendeoCore.LoyaltyCard, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  public func updateLoyaltyCard(loyaltyCard: TiendeoCore.LoyaltyCard, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  public func deleteLoyaltyCard(with id: Swift.String) -> RxSwift.Observable<Swift.Bool>
  public func addPromoCouponUserWithLoyaltyCard(promoCouponUser: TiendeoCore.PromoCouponUser, loyaltyCard: TiendeoCore.LoyaltyCard, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
}
extension ChipLocalEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<TiendeoCore.ChipLocalEntity>
  @objc @NSManaged dynamic public var text: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tagBox: TiendeoCore.TagBoxLocalEntity? {
    @objc get
    @objc set
  }
}
public struct StoreDetailRemoteDataSource : TiendeoCore.StoreDetailDataSource {
  public init()
  public func getStoreDetail(with id: Swift.String, countryCode: Swift.String) throws -> RxSwift.Observable<TiendeoCore.StoreDetail?>
}
public struct PrintStatEntity {
  public var city: Swift.String?
  public var searchWord: Swift.String?
  public var pageType: Swift.String?
  public var platform: Swift.String
  public var provider: Swift.String?
  public var origin: Swift.String?
  public var searchType: Swift.String?
  public var integration: Swift.String?
  public var view: Swift.String?
  public var userToken: Swift.String
  public var clientTimestamp: Swift.String
  public var timeZoneOffset: Swift.Int
  public var id: Swift.String
  public var catalogs: [TiendeoCore.PrintStatCatalogEntity]?
  public var articles: [TiendeoCore.PrintStatArticleEntity]?
  public var baseStatsUrl: Swift.String
  public init(city: Swift.String?, searchWord: Swift.String?, pageType: Swift.String?, platform: Swift.String = CoreConstants.Stats.platform, provider: Swift.String?, origin: Swift.String?, searchType: Swift.String?, integration: Swift.String?, view: Swift.String?, userToken: Swift.String, clientTimestamp: Swift.String = Date().stringFormatter(), timeZoneOffset: Swift.Int = TimeZone.current.secondsFromGMT(), id: Swift.String = UUID().uuidString, catalogs: [TiendeoCore.PrintStatCatalogEntity]?, articles: [TiendeoCore.PrintStatArticleEntity]?, baseStatsUrl: Swift.String)
}
public struct City {
  public let id: Swift.String
  public let name: Swift.String
  public let lat: Swift.Float
  public let lon: Swift.Float
  public init(id: Swift.String, name: Swift.String, lat: Swift.Float, lon: Swift.Float)
}
public class SendOpenAppStats {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SendOpenAppStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SendOpenAppStatsRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var openAppStatsEntity: TiendeoCore.OpenAppStatsEntity
  public init(baseUrl: Swift.String, openAppStatsEntity: TiendeoCore.OpenAppStatsEntity)
  @objc deinit
}
public class UpdateLoyaltyCard {
  public init(loyaltyCardsRepository: TiendeoCore.LoyaltyCardsRepository)
  public func execute(_ requestValues: TiendeoCore.UpdateLoyaltyCardRequestValues) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  @objc deinit
}
public class UpdateLoyaltyCardRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(loyaltyCard: TiendeoCore.LoyaltyCard, countryCode: Swift.String)
  @objc deinit
}
public struct Article {
  public let items: [TiendeoCore.ArticleItem]?
  public let articleName: Swift.String?
  public let brandName: Swift.String?
  public let description: Swift.String?
  public let price: Swift.String?
  public let oldPrice: Swift.String?
  public let promo: Swift.String?
  public let infoPrice: Swift.String?
  public let catalogId: Swift.String
  public let catalogTitle: Swift.String?
  public let categoryId: Swift.String?
  public let page: Swift.Int
  public let retailerId: Swift.String
  public let retailerName: Swift.String
  public let retailerLogo: Swift.String
  public let image: Swift.String
  public let expiresIn: Swift.String
  public let endPublication: Foundation.Date
  public let id: Swift.String
  public let productId: Swift.String?
  public let brandId: Swift.String?
  public let daysToExpire: Swift.Int
  public let daysSincePublication: Swift.Int
  public let catalogIsDynamic: Swift.Bool
  public let catalogExternalUrl: Swift.String?
  public var isSaved: Swift.Bool?
}
public struct CatalogRemoteDataSource : TiendeoCore.CatalogDataSource {
  public init()
  public func getCatalogs(with filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getCatalogById(catalogId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.Catalog?>
  public func getRelatedCatalogs(catalogId: Swift.String, latitude: Swift.Float, longitude: Swift.Float, search: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getCatalogs(latitude: Swift.Float, longitude: Swift.Float, searchWord: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getOffers(latitude: Swift.Float, longitude: Swift.Float, searchWord: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getOffers(with cityName: Swift.String, searchWord: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getCatalogs(with storeId: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getRecommendedCatalogs(latitude: Swift.Float, longitude: Swift.Float, retailerName: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.Catalog]>
}
extension Sequence {
  public func group<U>(by key: (Self.Iterator.Element) -> U) -> [U : [Self.Iterator.Element]] where U : Swift.Hashable
}
public class GetRecommendedLoyaltyCards {
  public init(loyaltyCardsRepository: TiendeoCore.LoyaltyCardsRepository)
  public func execute(_ requestValues: TiendeoCore.GetRecommendedLoyaltyCardsRequestValues) -> RxSwift.Observable<[TiendeoCore.RecommendedLoyaltyCard]>
  @objc deinit
}
public class GetRecommendedLoyaltyCardsRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String)
  @objc deinit
}
public struct OpeningStatsEntity {
  public let catalogId: Swift.String
  public let modelName: Swift.String?
  public let searchWord: Swift.String?
  public let searchType: Swift.String?
  public let searchCity: Swift.String?
  public let pageType: Swift.String?
  public let userToken: Swift.String
  public let version: Swift.String?
  public let position: Swift.Int?
  public let latitude: Swift.Float?
  public let longitude: Swift.Float?
  public let selectedLatitude: Swift.Float?
  public let selectedLongitude: Swift.Float?
  public let locationType: Swift.String?
  public let view: Swift.String?
  public let origin: Swift.String?
  public let integration: Swift.String
  public let clientTimeStamp: Swift.String
  public let timeZoneOffset: Swift.Int
  public let openingHash: Swift.String
  public let platform: Swift.String
  public let retailerId: Swift.String
  public let adUserId: Swift.String
  public let provider: Swift.String?
  public init(catalogId: Swift.String, modelName: Swift.String?, searchWord: Swift.String?, searchType: Swift.String?, searchCity: Swift.String?, pageType: Swift.String?, userToken: Swift.String, version: Swift.String?, position: Swift.Int?, latitude: Swift.Float?, longitude: Swift.Float?, selectedLatitude: Swift.Float?, selectedLongitude: Swift.Float?, locationType: Swift.String?, view: Swift.String?, origin: Swift.String?, integration: Swift.String, clientTimeStamp: Swift.String, openingHash: Swift.String, retailerId: Swift.String, adUserId: Swift.String, provider: Swift.String?)
}
extension InputStatsEntity {
  public func transformToOpeningStatsEntity(catalogId: Swift.String, modelName: Swift.String?, userDefaultCity: TiendeoCore.City?, retailerId: Swift.String, integration: Swift.String, positionInList: Swift.Int) -> TiendeoCore.OpeningStatsEntity
}
public struct CitiesRemoteDataSource : TiendeoCore.CitiesDataSource {
  public init()
  public func getCity(with id: Swift.String, countryCode: Swift.String) throws -> RxSwift.Observable<TiendeoCore.City?>
}
@objc public class InputStatsEntity : ObjectiveC.NSObject {
  public var searchWord: Swift.String?
  public var searchType: Swift.String?
  public var searchCity: Swift.String?
  public var pageType: Swift.String?
  public var userToken: Swift.String
  public var version: Swift.String
  public var position: Swift.Int?
  public var realLatitude: Swift.Float?
  public var realLongitude: Swift.Float?
  public var selectedLatitude: Swift.Float?
  public var selectedLongitude: Swift.Float?
  public var locationType: Swift.String?
  public var openingHash: Swift.String?
  public var retailerId: Swift.String?
  public var gdprEnabled: Swift.Bool
  public var view: Swift.String?
  final public let origin: Swift.String?
  public var eventName: Swift.String?
  public var action: Swift.String?
  public var integration: Swift.String?
  public var provider: Swift.String?
  public var productId: Swift.String?
  public var brandId: Swift.String?
  public var articleId: Swift.String?
  public var catalogId: Swift.String?
  public var categoryId: Swift.String?
  public var pageNumber: Swift.Int?
  public var numResults: Swift.Int?
  public var notificationId: Swift.String?
  public var userId: Swift.String?
  public var senderToken: Swift.String?
  public init(searchWord: Swift.String? = nil, searchType: Swift.String? = nil, searchCity: Swift.String? = nil, pageType: Swift.String? = "", userToken: Swift.String, version: Swift.String, position: Swift.Int? = nil, realLatitude: Swift.Float? = nil, realLongitude: Swift.Float? = nil, selectedLatitude: Swift.Float? = nil, selectedLongitude: Swift.Float? = nil, locationType: Swift.String? = nil, retailerId: Swift.String? = nil, gdprEnabled: Swift.Bool, view: Swift.String? = CoreConstants.Stats.undefined, origin: Swift.String? = nil, eventName: Swift.String? = nil, action: Swift.String? = nil, integration: Swift.String? = nil, provider: Swift.String? = nil, productId: Swift.String? = nil, brandId: Swift.String? = nil, articleId: Swift.String? = nil, catalogId: Swift.String? = nil, categoryId: Swift.String? = nil, pageNumber: Swift.Int? = nil, numResults: Swift.Int? = nil, notificationId: Swift.String? = nil, userId: Swift.String? = nil, senderToken: Swift.String? = nil)
  @objc deinit
  @objc override dynamic public init()
}
extension PrintStatLocal {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<TiendeoCore.PrintStatLocal>
  @objc @NSManaged dynamic public var baseStatsUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var city: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var clientTimestamp: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var integration: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var origin: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pageType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var platform: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var provider: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var searchType: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var searchWord: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeZoneOffset: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var userToken: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var view: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var articles: Foundation.NSSet? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var catalogs: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension PrintStatLocal {
  @objc(addArticlesObject:) @NSManaged dynamic public func addToArticles(_ value: TiendeoCore.PrintStatArticleLocal)
  @objc(removeArticlesObject:) @NSManaged dynamic public func removeFromArticles(_ value: TiendeoCore.PrintStatArticleLocal)
  @objc(addArticles:) @NSManaged dynamic public func addToArticles(_ values: Foundation.NSSet)
  @objc(removeArticles:) @NSManaged dynamic public func removeFromArticles(_ values: Foundation.NSSet)
}
extension PrintStatLocal {
  @objc(addCatalogsObject:) @NSManaged dynamic public func addToCatalogs(_ value: TiendeoCore.PrintStatCatalogLocal)
  @objc(removeCatalogsObject:) @NSManaged dynamic public func removeFromCatalogs(_ value: TiendeoCore.PrintStatCatalogLocal)
  @objc(addCatalogs:) @NSManaged dynamic public func addToCatalogs(_ values: Foundation.NSSet)
  @objc(removeCatalogs:) @NSManaged dynamic public func removeFromCatalogs(_ values: Foundation.NSSet)
}
public class GetGeofences {
  public init(geofencesRepository: TiendeoCore.GeofencesRepository)
  public func execute(_ requestValues: TiendeoCore.GetGeofencesRequestValues) -> RxSwift.Observable<[TiendeoCore.Geofence]>
  @objc deinit
}
public class GetGeofencesRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(lat: Swift.Float, lon: Swift.Float, count: Swift.Int, countryCode: Swift.String, appName: Swift.String)
  @objc deinit
}
public struct RetailersDataRepository : TiendeoCore.RetailersRepository {
  public init(dataSources: [TiendeoCore.RetailersDataSource])
  public func getRetailers(countryCode: Swift.String, sort: Swift.String) -> RxSwift.Observable<[TiendeoCore.Retailer]>
  public func getRetailers(with filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Retailer]>
  public func getPromocouponRetailersByIds(country: Swift.String, retailersIds: [Swift.String]) -> RxSwift.Observable<[TiendeoCore.PromoCouponRetailer]>
  public func getPromoCouponRetailersByPromoCouponId(promoCouponId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.PromoCouponRetailer]>
}
public struct SearchResultType {
  public static let generic: Swift.String
  public static let match: Swift.String
  public static let category: Swift.String
  public static let retailer: Swift.String
  public static let product: Swift.String
  public static let brand: Swift.String
  public static let shoppingCenter: Swift.String
}
public struct SearchResult {
  public let searchResultId: Swift.String
  public let name: Swift.String
  public var type: Swift.String
  public var category: Swift.String?
  public var visited: Swift.Bool
  public init(searchResultId: Swift.String, name: Swift.String, type: Swift.String, visited: Swift.Bool, category: Swift.String?)
}
extension SearchResult {
  public func transformToProduct() -> TiendeoCore.Product?
}
public protocol CatalogDataSource {
  func getCatalogs(with filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  func getCatalogById(catalogId: Swift.String, countryCode: Swift.String) throws -> RxSwift.Observable<TiendeoCore.Catalog?>
  func getRelatedCatalogs(catalogId: Swift.String, latitude: Swift.Float, longitude: Swift.Float, search: Swift.String, countryCode: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.Catalog]>
  func getCatalogs(latitude: Swift.Float, longitude: Swift.Float, searchWord: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.Catalog]>
  func getOffers(latitude: Swift.Float, longitude: Swift.Float, searchWord: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.Catalog]>
  func getOffers(with cityName: Swift.String, searchWord: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.Catalog]>
  func getCatalogs(with storeId: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.Catalog]>
  func getRecommendedCatalogs(latitude: Swift.Float, longitude: Swift.Float, retailerName: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.Catalog]>
}
public protocol ArticleExpirationLayout {
  var daysToExpire: Swift.Int { get }
  var daysSincePublication: Swift.Int { get }
  func getExpirationColor() -> UIKit.UIColor
}
extension ArticleExpirationLayout {
  public func getExpirationColor() -> UIKit.UIColor
  public func isLastDays() -> Swift.Bool
}
public struct ArticleViewEntity : TiendeoCore.ArticleExpirationLayout {
  public let articleName: Swift.String?
  public let brandName: Swift.String?
  public let description: Swift.String?
  public let price: Swift.String?
  public let oldPrice: Swift.String?
  public let promo: Swift.String?
  public let infoPrice: Swift.String?
  public let catalogId: Swift.String
  public let catalogTitle: Swift.String?
  public let categoryId: Swift.String?
  public let page: Swift.Int
  public let itemsPages: [Swift.Int]?
  public let retailer: TiendeoCore.RetailerViewEntity
  public let image: Swift.String
  public let expiresIn: Swift.String
  public let endPublication: Foundation.Date
  public let id: Swift.String
  public let productId: Swift.String?
  public let brandId: Swift.String?
  public let daysToExpire: Swift.Int
  public let daysSincePublication: Swift.Int
  public let catalogIsDynamic: Swift.Bool
  public let catalogExternalUrl: Swift.String?
  public var isSaved: Swift.Bool?
  public let isTagPage: Swift.Bool
}
extension Article {
  public func transformToUI() -> TiendeoCore.ArticleViewEntity
}
extension ArticleViewEntity {
  public func transformToTagBox() -> TiendeoCore.TagBox
}
public protocol ListItemProtocol {
  var viewIdentifier: Swift.String { get set }
  var height: CoreGraphics.CGFloat { get set }
}
public protocol ListItemSelectable {
  var didSelectItem: ((TiendeoCore.ListItemSelectable, Swift.Int) -> Swift.Void) { get set }
}
public struct MallItem {
  public let id: Swift.String
  public let name: Swift.String
  public let address: Swift.String
  public let zipCode: Swift.String
  public let city: Swift.String
  public let province: Swift.String
  public let suburb: Swift.String
  public let webUrl: Swift.String
  public let phone: Swift.String
  public let latitude: Swift.Float
  public let longitude: Swift.Float
  public let distance: Swift.Float
  public let hasOffers: Swift.Bool
  public let imageUrl: Swift.String
  public init(id: Swift.String, name: Swift.String, address: Swift.String, zipCode: Swift.String, city: Swift.String, province: Swift.String, suburb: Swift.String, webUrl: Swift.String, phone: Swift.String, latitude: Swift.Float, longitude: Swift.Float, distance: Swift.Float, hasOffers: Swift.Bool, imageUrl: Swift.String)
}
public class ViewerProConfigService {
  public static let sharedInstance: TiendeoCore.ViewerProConfigService
  public var config: TiendeoCore.Config?
  public var integration: TiendeoCore.ViewerProIntegration?
  public var localIntegration: TiendeoCore.ViewerProLocalIntegrationEntity {
    get
    set
  }
  public var selectedCountry: Swift.String?
  public init()
  public func currentIntegration() -> TiendeoCore.ViewerProIntegration
  public func currentConfig() -> TiendeoCore.Config
  public func currentLocalIntegration() -> TiendeoCore.ViewerProLocalIntegrationEntity
  public func isLoaded() -> Swift.Bool
  public func isProviderTiendeo() -> Swift.Bool
  public func getCountry() -> Swift.String?
  @objc deinit
}
public protocol Mock : AnyObject {
  var queue: [Any]? { get set }
  func addToReturnQueue(_ item: Any)
  func getNextEnqueuedItem() -> Any
}
public enum TagBoxAction {
  case clip
  case popup
  case url
  public static func == (a: TiendeoCore.TagBoxAction, b: TiendeoCore.TagBoxAction) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct ViewerProLocalIntegrationEntity {
  public let enableTagIcon: Swift.Bool
  public let enableClipAnimationImage: Swift.Bool
  public let actionClipAnimationImage: TiendeoCore.TagBoxAction
}
public struct CategoriesDataRepository : TiendeoCore.CategoriesRepository {
  public init(dataSources: [TiendeoCore.CategoriesDataSource])
  public func getCategories(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.CategoryItem]>
  public func getCategories(with filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.CategoryItem]>
}
public struct BatchRequest {
  public let method: TiendeoCore.MethodRequest
  public let endPoint: Swift.String
  public let wrapperName: Swift.String
  public let headers: [Swift.String : Swift.String]?
  public let content: [Swift.String : Any]?
}
public struct MethodRequest {
  public let method: Swift.String
}
public protocol TiendeoCountriesDataSource {
  func getTiendeoCountries() throws -> RxSwift.Observable<[TiendeoCore.TiendeoCountry]>
  func getTiendeoCountryByCountryCode(countryCode: Swift.String) throws -> RxSwift.Observable<TiendeoCore.TiendeoCountry?>
}
public protocol RetailersRepository {
  func getRetailers(countryCode: Swift.String, sort: Swift.String) -> RxSwift.Observable<[TiendeoCore.Retailer]>
  func getRetailers(with filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Retailer]>
  func getPromocouponRetailersByIds(country: Swift.String, retailersIds: [Swift.String]) -> RxSwift.Observable<[TiendeoCore.PromoCouponRetailer]>
  func getPromoCouponRetailersByPromoCouponId(promoCouponId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.PromoCouponRetailer]>
}
public class CreateLoyaltyCard {
  public init(loyaltyCardsRepository: TiendeoCore.LoyaltyCardsRepository)
  public func execute(_ requestValues: TiendeoCore.CreateLoyaltyCardRequestValues) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  @objc deinit
}
public class CreateLoyaltyCardRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(loyaltyCard: TiendeoCore.LoyaltyCard, countryCode: Swift.String)
  @objc deinit
}
public struct AlertsDataRepository : TiendeoCore.AlertsRepository {
  public init(dataSources: [TiendeoCore.AlertsDataSource])
  public func getAlerts(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Alert]>
}
public struct TagBox {
  public let articleId: Swift.String
  public let pageNumber: Swift.Int
  public let url: Swift.String?
  public let price: Swift.String?
  public let infoPrice: Swift.String?
  public let imageName: Swift.String?
  public let imageUrl: Swift.String?
  public let title: Swift.String?
  public var description: Swift.String?
  public let tagProductId: Swift.String?
  public let tagBrandId: Swift.String?
  public let type: Swift.Int?
  public let x1: Swift.Double
  public let x2: Swift.Double
  public let y1: Swift.Double
  public let y2: Swift.Double
  public let highlightInMagicCatalog: Swift.Bool?
  public let isWholePage: Swift.Bool
  public var catalogId: Swift.String?
  public var retailerName: Swift.String?
  public var retailerLogo: Swift.String?
  public var expirationDate: Foundation.Date?
  public var timeStamp: Swift.Double?
  public let promoTag: TiendeoCore.PromoTag?
  public var brandName: Swift.String?
  public var chips: [TiendeoCore.Chip]?
  public var oldPrice: Swift.String?
  public var legalText: Swift.String?
  public init(articleId: Swift.String, pageNumber: Swift.Int, url: Swift.String?, price: Swift.String?, infoPrice: Swift.String?, imageName: Swift.String?, imageUrl: Swift.String?, title: Swift.String?, description: Swift.String?, tagProductId: Swift.String?, tagBrandId: Swift.String?, type: Swift.Int?, x1: Swift.Double, x2: Swift.Double, y1: Swift.Double, y2: Swift.Double, highlightInMagicCatalog: Swift.Bool?, isWholePage: Swift.Bool, catalogId: Swift.String?, retailerName: Swift.String?, retailerLogo: Swift.String?, expirationDate: Foundation.Date?, timeStamp: Swift.Double?, promoTag: TiendeoCore.PromoTag?, brandName: Swift.String?, chips: [TiendeoCore.Chip]?, oldPrice: Swift.String?, legalText: Swift.String?)
}
public class UpdateProductStatus {
  public init(productsRepository: TiendeoCore.ProductsRepository)
  public func execute(_ requestValues: TiendeoCore.UpdateProductStatusRequestValues) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  @objc deinit
}
public class UpdateProductStatusRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(product: TiendeoCore.Product, shoppingList: TiendeoCore.ShoppingList, countryCode: Swift.String)
  @objc deinit
}
public struct CashbackRewardsDataRepository : TiendeoCore.CashbackRewardsRepository {
  public init(remoteDataSource: TiendeoCore.CashbackRewardsDataSource)
  public func getCashbackRewards(with countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.CashbackReward]>
}
public struct GeofencesLocalDataSource : TiendeoCore.GeofencesDataSource {
  public init()
  public func getGeofences(lat: Swift.Float, lon: Swift.Float, count: Swift.Int, countryCode: Swift.String, appName: Swift.String) -> RxSwift.Observable<[TiendeoCore.Geofence]>
  public func saveGeofences(geofences: [TiendeoCore.Geofence]) -> RxSwift.Observable<[TiendeoCore.Geofence]>
  public func getTriggeredGeofences() -> RxSwift.Observable<[TiendeoCore.Geofence]>
  public func markGeofenceAsTriggeredById(_ id: Swift.String) -> RxSwift.Observable<TiendeoCore.Geofence?>
  public func deleteNonTriggeredGeofences() -> RxSwift.Observable<Swift.Bool>
  public func updateTriggeredGeofencesStatus() -> RxSwift.Observable<Swift.Bool>
}
extension TagBoxLocalEntity {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<TiendeoCore.TagBoxLocalEntity>
  @objc @NSManaged dynamic public var articleId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var brandName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var catalogId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var countryCode: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var expirationDate: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var imageUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var infoPrice: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var isWholePage: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var logoUrl: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var oldPrice: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var pageNumber: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var price: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var productDescription: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var retailerId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var retailerName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var timeStamp: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var title: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var url: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tagProductId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var tagBrandId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var chips: Foundation.NSSet? {
    @objc get
    @objc set
  }
}
extension TagBoxLocalEntity {
  @objc(addChipsObject:) @NSManaged dynamic public func addToChips(_ value: TiendeoCore.ChipLocalEntity)
  @objc(removeChipsObject:) @NSManaged dynamic public func removeFromChips(_ value: TiendeoCore.ChipLocalEntity)
  @objc(addChips:) @NSManaged dynamic public func addToChips(_ values: Foundation.NSSet)
  @objc(removeChips:) @NSManaged dynamic public func removeFromChips(_ values: Foundation.NSSet)
}
public struct FilterRequestParams {
  public let filter: TiendeoCore.Filter
  public let start: Swift.Int?
  public let count: Swift.Int?
  public let latitude: Swift.Float
  public let longitude: Swift.Float
  public init(filter: TiendeoCore.Filter, start: Swift.Int?, count: Swift.Int?, latitude: Swift.Float, longitude: Swift.Float)
}
public protocol StoresRepository {
  func getStores(lat1: Swift.Float, lon1: Swift.Float, lat2: Swift.Float, lon2: Swift.Float, search: Swift.String, select: Swift.String, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Store]>
  func getNearestStoresById(catalogId: Swift.String, lat: Swift.Float, lon: Swift.Float, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Store]>
  func getStores(with cityName: Swift.String, retailerName: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Store]>
  func getDefaultStore(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.Store?>
  func saveDefaultStore(store: TiendeoCore.Store, countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool>
  func deleteDefaultStore(countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool>
  func getStore(with retailerId: Swift.String, clientStoreId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.Store>
}
public protocol ProductsRepository {
  func getTopProducts(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Product]>
  func updateProductStatus(product: TiendeoCore.Product, shoppingList: TiendeoCore.ShoppingList, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  func getOffersByProducts(names: [Swift.String], countryCode: Swift.String, latitude: Swift.Float, longitude: Swift.Float) -> RxSwift.Observable<[TiendeoCore.ProductOffers]>
}
public struct CouponViewEntity {
  public let couponId: Swift.String
  public let catalogId: Swift.String
  public let shortText: Swift.String
  public let hasImage: Swift.Bool
  public let type: TiendeoCore.CouponType
  public let color: Swift.String
  public let imageUrl: Swift.String
  public let externalUrl: Swift.String
  public func typeText() -> Swift.String
  public func getCouponPrimaryColor() -> UIKit.UIColor
  public func getCouponSecondaryColor() -> UIKit.UIColor
}
extension Coupon {
  public func transformToUI(imageTemplate: Swift.String, pathWeb: Swift.String, pathCoupons: Swift.String, provider: Swift.String) -> TiendeoCore.CouponViewEntity
}
public class GetSearchResultRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String)
  @objc deinit
}
public class GetLatestSearchResultRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(numberOfResults: Swift.Int, countryCode: Swift.String)
  @objc deinit
}
extension UIImage {
  public class func image(fromLayer layer: QuartzCore.CALayer) -> UIKit.UIImage
  convenience public init?(color: UIKit.UIColor, size: CoreGraphics.CGSize = CGSize(width: 1, height: 1))
  public class func getPromoCouponImage(type: TiendeoCore.PromoCouponType, isSaved: Swift.Bool) -> UIKit.UIImage?
  public func getBackgroundColor() -> UIKit.UIColor
  public func transformToGrayImage() -> UIKit.UIImage?
}
public struct GeofencesRemoteDataSource : TiendeoCore.GeofencesDataSource {
  public init()
  public func getGeofences(lat: Swift.Float, lon: Swift.Float, count: Swift.Int, countryCode: Swift.String, appName: Swift.String) -> RxSwift.Observable<[TiendeoCore.Geofence]>
  public func saveGeofences(geofences: [TiendeoCore.Geofence]) -> RxSwift.Observable<[TiendeoCore.Geofence]>
  public func getTriggeredGeofences() -> RxSwift.Observable<[TiendeoCore.Geofence]>
  public func markGeofenceAsTriggeredById(_ id: Swift.String) -> RxSwift.Observable<TiendeoCore.Geofence?>
  public func deleteNonTriggeredGeofences() -> RxSwift.Observable<Swift.Bool>
  public func updateTriggeredGeofencesStatus() -> RxSwift.Observable<Swift.Bool>
}
public class MallDataRepository : TiendeoCore.MallRepository {
  public init(remoteDataSource: TiendeoCore.MallDataSource)
  public func getMalls(with filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.MallItem]>
  public func getMall(with id: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.MallItem>
  public func getStores(with mallId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Store]>
  @objc deinit
}
public class GetCatalogsByFilter {
  public init(catalogRepository: TiendeoCore.CatalogRepository)
  public func execute(_ requestValues: TiendeoCore.GetCatalogsByFilterRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  @objc deinit
}
public class GetCatalogsByFilterRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public var filterRequest: TiendeoCore.FilterRequestParams
  public init(filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class ConfigService {
  public static let sharedInstance: TiendeoCore.ConfigService
  public func setGlobalIntegrations(_ global: TiendeoCore.GlobalIntegrationsWrapper)
  public func getConfig() -> TiendeoCore.Config
  public func getIntegration() -> TiendeoCore.Integration
  public func isLoaded() -> Swift.Bool
  public func getBaseUrlStatsApi() -> Swift.String?
  @objc deinit
}
extension Float {
  public func formattedDistance() -> Swift.String
}
public struct StatsLocalDataSource : TiendeoCore.StatsDataSource {
  public init()
  public func consent(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  public func extractUserData(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  public func deleteUserData(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendEventStats(baseUrl: Swift.String, inputStats: TiendeoCore.InputStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendNavigationStats(baseUrl: Swift.String, navigationStatsEntity: TiendeoCore.NavigationStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendArticleEventStats(baseUrl: Swift.String, articleClipEventStatsEntity: TiendeoCore.ArticleClipEventStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendNotificationEventStats(baseUrl: Swift.String, notificationStatsEventEntity: TiendeoCore.NotificationStatsEventEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendCatalogStats(baseUrl: Swift.String, openingStatsEntity: TiendeoCore.OpeningStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendTimeStats(baseUrl: Swift.String, readingStatsEntity: TiendeoCore.ReadingStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendArticleBuyStats(baseUrl: Swift.String, articleStatsEntity: TiendeoCore.ArticleStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendArticleShowStats(baseUrl: Swift.String, articleStatsEntity: TiendeoCore.ArticleStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendCatalogAdBottomStats(baseUrl: Swift.String, catalogEventStatsEntity: TiendeoCore.CatalogEventStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendCatalogToolbarStats(baseUrl: Swift.String, catalogEventStatsEntity: TiendeoCore.CatalogEventStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendStoreOpeningStats(baseUrl: Swift.String, storeStatsEntity: TiendeoCore.StoreStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendDeepLinkOnBoardStats(baseUrl: Swift.String, deepLinkStatsEntity: TiendeoCore.DeepLinkStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendOpenAppStats(baseUrl: Swift.String, openAppStatsEntity: TiendeoCore.OpenAppStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func savePrintStat(printStatEntity: TiendeoCore.PrintStatEntity) -> RxSwift.Observable<Swift.Bool>
  public func getSavedPrintStats() -> RxSwift.Observable<[TiendeoCore.PrintStatEntity]>
  public func deletePrintStats(with ids: [Swift.String]) -> RxSwift.Observable<Swift.Bool>
  public func sendSavedPrintStats(baseUrl: Swift.String, printStats: [TiendeoCore.PrintStatEntity]) -> RxSwift.Observable<[Swift.String : Swift.Bool]>
}
extension Array {
  public func takeElements(elementCount: Swift.Int) -> Swift.Array<Element>
  public func toString() -> Swift.String?
}
extension Array where Element : Swift.Equatable {
  public func removeDuplicates() -> [Element]
}
public struct ArticleStatsEntity {
  public let productId: Swift.String
  public let articleId: Swift.String
  public let brandId: Swift.String
  public let clientTimeStamp: Swift.String
  public let timeZoneOffset: Swift.Int
  public let searchWord: Swift.String?
  public let searchCity: Swift.String?
  public let integration: Swift.String?
  public let userToken: Swift.String
  public let platform: Swift.String
  public let openingHash: Swift.String?
  public let view: Swift.String?
  public let origin: Swift.String?
  public let version: Swift.String?
  public init(productId: Swift.String, articleId: Swift.String, brandId: Swift.String, searchWord: Swift.String?, searchCity: Swift.String?, integration: Swift.String?, userToken: Swift.String, openingHash: Swift.String?, view: Swift.String?, origin: Swift.String?, version: Swift.String?)
}
extension InputStatsEntity {
  public func transformToArticleStatsEntity(productId: Swift.String, articleId: Swift.String, brandId: Swift.String) -> TiendeoCore.ArticleStatsEntity
}
public class GetCatalogsByLatLonAndSearchWord {
  public init(catalogRepository: TiendeoCore.CatalogRepository)
  public func execute(_ requestValues: TiendeoCore.GetCatalogsByLatLonAndSearchWordRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  @objc deinit
}
public class GetCatalogsByLatLonAndSearchWordRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(latitude: Swift.Float, longitude: Swift.Float, searchWord: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String)
  @objc deinit
}
public class GetCatalogsWithFavorite {
  public init(favoritesRepository: TiendeoCore.FavoritesRepository)
  public func execute(_ requestValues: TiendeoCore.GetCatalogsWithFavoriteRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  @objc deinit
}
public class GetCatalogsWithFavoriteRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(catalogsObservable: RxSwift.Observable<[TiendeoCore.Catalog]>, countryCode: Swift.String, appUserId: Swift.String)
  @objc deinit
}
public struct RecommendedLoyaltyCard {
  public let id: Swift.String
  public let retailerId: Swift.String
  public let retailerName: Swift.String
  public let retailerImage: Swift.String
}
public struct StoreDetailDataRepository : TiendeoCore.StoreDetailRepository {
  public init(dataSources: [TiendeoCore.StoreDetailDataSource])
  public func getStoreDetail(with id: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.StoreDetail>
}
public class GetStoresInRegion {
  public init(storesRepository: TiendeoCore.StoresRepository)
  public func execute(_ requestValues: TiendeoCore.GetStoresInRegionRequestValues) -> RxSwift.Observable<[TiendeoCore.Store]>
  @objc deinit
}
public class GetStoresInRegionRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(lat1: Swift.Float, lon1: Swift.Float, lat2: Swift.Float, lon2: Swift.Float, search: Swift.String, select: Swift.String, count: Swift.Int, countryCode: Swift.String)
  @objc deinit
}
public struct ConfigDataRepository : TiendeoCore.ConfigRepository {
  public init(dataSources: [TiendeoCore.ConfigDataSource])
  public func getGlobalIntegrations(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.GlobalIntegrationsWrapper>
  public func getViewerProIntegrations(countryCode: Swift.String, provider: Swift.String) -> RxSwift.Observable<TiendeoCore.ViewerProIntegrations>
}
public struct ArticleItem {
  public let name: Swift.String
  public let page: Swift.Int
  public let productId: Swift.String
}
public struct TiendeoDomainConstants {
  public struct Settings {
    public static let channel: Swift.String
    public static let platform: Swift.String
    public static let os: Swift.String
    public static let platformStats: Swift.String
    public static let provider: Swift.String
    public static let type: Swift.String
  }
  public struct Gdpr {
    public static let Accepted: Swift.String
    public static let Rejected: Swift.String
  }
  public struct AuthHeader {
    public static let appUserId: Swift.String
    public static let countryCode: Swift.String
  }
}
public struct ShoppingListConstants {
  public static let defaultTitle: Swift.String
}
public class RefreshInfo {
  public init(userRepository: TiendeoCore.AppUserRepository)
  public func execute(_ requestValues: TiendeoCore.RefreshInfoRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class RefreshInfoRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public var appInfo: TiendeoCore.AppInfo
  public init(countryCode: Swift.String, appInfo: TiendeoCore.AppInfo)
  @objc deinit
}
public enum ListItemType {
  case catalog
  case coupon
  case adBanner
  case customBanner
  case slider
  public static func == (a: TiendeoCore.ListItemType, b: TiendeoCore.ListItemType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct ListItem {
  public let id: Swift.String
  public let cellIdentifier: Swift.String
  public let type: TiendeoCore.ListItemType
  public let itemSize: CoreGraphics.CGSize?
  public var catalog: TiendeoCore.CatalogViewEntity?
  public let bannerView: TiendeoCore.BannerViewEntity?
  public let slider: TiendeoCore.SliderViewEntity?
  public let customBanner: TiendeoCore.CustomBannerViewEntity?
  public init(id: Swift.String, cellIdentifier: Swift.String, type: TiendeoCore.ListItemType, itemSize: CoreGraphics.CGSize?, catalog: TiendeoCore.CatalogViewEntity?, bannerView: TiendeoCore.BannerViewEntity?, slider: TiendeoCore.SliderViewEntity?, customBanner: TiendeoCore.CustomBannerViewEntity?)
}
extension CatalogViewEntity {
  public func transformToListItem(catalogCellIdentifier: Swift.String = CatalogListCollectionViewCell.reuseIdentifier(), couponCellIdentifier: Swift.String = CouponListCollectionViewCell.reuseIdentifier()) -> TiendeoCore.ListItem
}
extension Sequence where Self.Element == TiendeoCore.ListItem {
  public func groupBy(numberOfItemsPerRow: Swift.Int) -> [[TiendeoCore.ListItem]]
}
public struct StoresRemoteDataSource : TiendeoCore.StoresDataSource {
  public init()
  public func getStores(lat1: Swift.Float, lon1: Swift.Float, lat2: Swift.Float, lon2: Swift.Float, search: Swift.String, select: Swift.String, count: Swift.Int, countryCode: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.Store]>
  public func getNearestStoresById(catalogId: Swift.String, lat: Swift.Float, lon: Swift.Float, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.Store]>
  public func getStores(with cityName: Swift.String, retailerName: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.Store]>
  public func getStore(with retailerId: Swift.String, clientStoreId: Swift.String, countryCode: Swift.String) throws -> RxSwift.Observable<TiendeoCore.Store?>
  public func getDefaultStore(countryCode: Swift.String) throws -> RxSwift.Observable<TiendeoCore.Store?>
  public func saveDefaultStore(store: TiendeoCore.Store, countryCode: Swift.String) throws -> RxSwift.Observable<Swift.Bool?>
  public func deleteDefaultStore(countryCode: Swift.String) throws -> RxSwift.Observable<Swift.Bool?>
}
public class GetRecommendedCatalogs {
  public init(catalogRepository: TiendeoCore.CatalogRepository)
  public func execute(_ requestValues: TiendeoCore.GetRecommendedCatalogsRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  @objc deinit
}
public class GetRecommendedCatalogsRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(latitude: Swift.Float, longitude: Swift.Float, retailerName: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String)
  @objc deinit
}
public class AddSearchResult {
  public init(searchResultsRepository: TiendeoCore.SearchResultsRepository)
  public func execute(_ requestValues: TiendeoCore.AddSearchResultRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class AddSearchResultRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(searchResult: TiendeoCore.SearchResult, countryCode: Swift.String)
  @objc deinit
}
public protocol SearchResultsRepository {
  func getSearchResults(types: [Swift.String], searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResultSection]>
  func getSearchProductResults(searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  func getLatestSearchAllResults(numberOfResults: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  func getLatestSearchProductResults(numberOfResults: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  func getLatestSearchLoyaltyCardsResults(numberOfResults: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  func addSearchResult(searchResult: TiendeoCore.SearchResult, countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool>
  func getSearchCityResults(searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
}
public protocol StoreDetailRepository {
  func getStoreDetail(with id: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.StoreDetail>
}
@_hasMissingDesignatedInitializers public class InputStatsSingleton {
  public static let sharedInstance: TiendeoCore.InputStatsSingleton
  public var inputStatsEntity: TiendeoCore.InputStatsEntity?
  @objc deinit
}
public class ConsentGdpr {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.ConsentGdprDataRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class ConsentGdprDataRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var appUserId: Swift.String?
  public var userKey: Swift.String?
  public var complianceText: Swift.String?
  public var clientTimestamp: Swift.String?
  public var response: Swift.String?
  public init(baseUrl: Swift.String, appUserId: Swift.String?, userKey: Swift.String?, complianceText: Swift.String?, clientTimestamp: Swift.String?, response: Swift.String?)
  @objc deinit
}
public struct CatalogViewEntity {
  public let catalogId: Swift.String
  public let pageNumber: Swift.Int
  public let numPages: Swift.Int
  public let storeId: Swift.String
  public let retailer: TiendeoCore.RetailerViewEntity?
  public let catalogSmallImage: Swift.String?
  public let catalogBigImage: Swift.String?
  public let categoryName: Swift.String?
  public let expirationDate: Foundation.Date?
  public let activationDate: Foundation.Date?
  public let expirationDays: Swift.Int?
  public let title: Swift.String?
  public let coupon: TiendeoCore.CouponViewEntity?
  public let withAds: Swift.Bool?
  public var width: Swift.Int?
  public var height: Swift.Int?
  public let externalUrl: Swift.String
  public var favoriteId: Swift.String?
  public let description: Swift.String?
  public let sections: [TiendeoCore.CatalogSectionViewEntity]?
  public let showDetails: Swift.Bool?
  public let modelName: Swift.String?
  public init(catalogId: Swift.String, pageNumber: Swift.Int, numPages: Swift.Int, storeId: Swift.String, retailer: TiendeoCore.RetailerViewEntity?, catalogSmallImage: Swift.String?, catalogBigImage: Swift.String?, categoryName: Swift.String?, expirationDate: Foundation.Date?, activationDate: Foundation.Date?, expirationDays: Swift.Int?, title: Swift.String?, coupon: TiendeoCore.CouponViewEntity?, withAds: Swift.Bool?, width: Swift.Int?, height: Swift.Int?, externalUrl: Swift.String, favoriteId: Swift.String?, description: Swift.String?, sections: [TiendeoCore.CatalogSectionViewEntity]?, showDetails: Swift.Bool?, modelName: Swift.String?)
  public func loadBigImageWithIndex(index: Swift.String) -> Swift.String?
  public func loadSmallImageWithIndex(index: Swift.String) -> Swift.String?
  public func expirationText() -> Swift.String
  public func isCoupon() -> Swift.Bool
  public func getShareURL(pathWeb: Swift.String, pathCatalog: Swift.String, pageNumber: Swift.Int, countryCode: Swift.String) -> Foundation.URL?
}
extension Catalog {
  public func transformToUI(staticUrl: Swift.String, pathWeb: Swift.String, pathCoupons: Swift.String, provider: Swift.String) -> TiendeoCore.CatalogViewEntity
}
public class SendEventStats {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SendEventStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SendEventStatsRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var inputStats: TiendeoCore.InputStatsEntity
  public init(baseUrl: Swift.String, inputStats: TiendeoCore.InputStatsEntity)
  @objc deinit
}
public protocol FavoritesRepository {
  func getFavorites(countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<[TiendeoCore.Favorite]>
  func addFavorites(favorites: [TiendeoCore.Favorite], countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<Swift.Bool>
  func deleteFavoriteBy(favoriteId: Swift.String, countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<Swift.Bool>
  func syncFavorites(countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<[TiendeoCore.Favorite]>
}
public class GetCategories {
  public init(categoriesRepository: TiendeoCore.CategoriesRepository)
  public func execute(_ requestValues: TiendeoCore.GetCategoriesRequestValues) -> RxSwift.Observable<[TiendeoCore.CategoryItem]>
  @objc deinit
}
public class GetCategoriesRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String)
  @objc deinit
}
public enum SliderType {
  case favorites
  public static func == (a: TiendeoCore.SliderType, b: TiendeoCore.SliderType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct SliderViewEntity {
  public let id: Swift.String
  public let title: Swift.String?
  public let type: TiendeoCore.SliderType
  public let items: [TiendeoCore.SliderItem]
  public init(id: Swift.String, title: Swift.String?, type: TiendeoCore.SliderType, items: [TiendeoCore.SliderItem])
}
public struct ViewerProIntegrationRemoteEntity : ObjectMapper.Mappable {
  public init?(map: ObjectMapper.Map)
  public mutating func mapping(map: ObjectMapper.Map)
}
@objc public class StoreViewEntity : ObjectiveC.NSObject {
  final public let storeId: Swift.String
  final public let name: Swift.String?
  final public let address: Swift.String?
  final public let lat: Swift.Float
  final public let lon: Swift.Float
  final public let distance: Swift.Float?
  final public let phone: Swift.String?
  final public let retailer: TiendeoCore.RetailerViewEntity?
  public var schedulesStrings: [Swift.String]?
  final public let postcode: Swift.String?
  final public let city: Swift.String?
  final public let withCatalogs: Swift.Bool
  public static var selectedParams: Swift.String
  public init(storeId: Swift.String, name: Swift.String?, address: Swift.String?, lat: Swift.Float, lon: Swift.Float, distance: Swift.Float?, phone: Swift.String?, retailer: TiendeoCore.RetailerViewEntity?, schedulesStrings: [Swift.String]?, postcode: Swift.String?, city: Swift.String?, withCatalogs: Swift.Bool)
  public func transformToDomain() -> TiendeoCore.Store
  public func formattedDistance() -> Swift.String
  public func logoUrl(staticUrl: Swift.String) -> Swift.String
  @objc deinit
  @objc override dynamic public init()
}
extension StoreViewEntity : MapKit.MKAnnotation {
  @objc dynamic public var coordinate: CoreLocation.CLLocationCoordinate2D {
    @objc get
  }
  @objc dynamic public var title: Swift.String? {
    @objc get
  }
  @objc dynamic public var subtitle: Swift.String? {
    @objc get
  }
}
extension Store {
  public func transformToUI(staticUrl: Swift.String) -> TiendeoCore.StoreViewEntity?
}
public class SendNotificationEventStats {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SendNotificationEventStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SendNotificationEventStatsRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var notificationStatsEventEntity: TiendeoCore.NotificationStatsEventEntity
  public init(baseUrl: Swift.String, notificationStatsEventEntity: TiendeoCore.NotificationStatsEventEntity)
  @objc deinit
}
@_hasMissingDesignatedInitializers public class Fonts {
  public static let sharedInstance: TiendeoCore.Fonts
  public func tndRegular(_ size: CoreGraphics.CGFloat) -> UIKit.UIFont
  public func tndLight(_ size: CoreGraphics.CGFloat) -> UIKit.UIFont
  public func tndSemiBold(_ size: CoreGraphics.CGFloat) -> UIKit.UIFont
  public func tndBold(_ size: CoreGraphics.CGFloat) -> UIKit.UIFont
  public func tndExtraBold(_ size: CoreGraphics.CGFloat) -> UIKit.UIFont
  @objc deinit
}
public class GetTiendeoCountries {
  public init(tiendeoCountriesRepository: TiendeoCore.TiendeoCountriesRepository)
  public func execute(_ requestValues: TiendeoCore.GetTiendeoContriesRequestValues = GetTiendeoContriesRequestValues()) -> RxSwift.Observable<[TiendeoCore.TiendeoCountry]>
  @objc deinit
}
public class GetTiendeoContriesRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init()
  @objc deinit
}
public struct ReadingStatsEntity {
  public let catalogId: Swift.String
  public let pageNumber: Swift.Int
  public let timeWithZoom: Swift.Double
  public let timeWithoutZoom: Swift.Double
  public let searchType: Swift.String?
  public let searchWord: Swift.String?
  public let searchCity: Swift.String?
  public let pageType: Swift.String?
  public let clientTimeStamp: Swift.String
  public let timeZoneOffset: Swift.Int
  public let platform: Swift.String
  public let version: Swift.String?
  public let integration: Swift.String
  public let userToken: Swift.String
  public let openingHash: Swift.String?
  public let view: Swift.String?
  public let origin: Swift.String?
  public let adUserId: Swift.String
  public let provider: Swift.String?
  public init(catalogId: Swift.String, pageNumber: Swift.Int, timeWithZoom: Swift.Double, timeWithoutZoom: Swift.Double, version: Swift.String?, integration: Swift.String, userToken: Swift.String, openingHash: Swift.String?, searchType: Swift.String?, searchWord: Swift.String?, pageType: Swift.String?, view: Swift.String?, origin: Swift.String?, adUserId: Swift.String, searchCity: Swift.String?, provider: Swift.String?)
}
extension InputStatsEntity {
  public func transformToReadingStatsEntity(catalogId: Swift.String, page: Swift.Int, zoomTime: Swift.Double, noZoomTime: Swift.Double, integration: Swift.String) -> TiendeoCore.ReadingStatsEntity
}
public struct BannerViewEntity {
}
@objc @_inheritsConvenienceInitializers public class AdBannerListCollectionViewCell : UIKit.UICollectionViewCell, TiendeoCore.ListCollectionViewCellProtocol {
  @objc override dynamic public func prepareForReuse()
  public func setupCell(with item: TiendeoCore.ListItem)
  public func setupCell(with item: TiendeoCore.ListItemProtocol)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public class SyncLoyaltyCards {
  public init(loyaltyCardsRepository: TiendeoCore.LoyaltyCardsRepository)
  public func execute(_ requestValues: TiendeoCore.SyncLoyaltyCardsRequestValues) -> RxSwift.Observable<[TiendeoCore.LoyaltyCard]>
  @objc deinit
}
public class SyncLoyaltyCardsRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String)
  @objc deinit
}
public protocol ProductsDataSource {
  func getTopProducts(countryCode: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.Product]>
  func updateProductStatus(product: TiendeoCore.Product, shoppingList: TiendeoCore.ShoppingList, countryCode: Swift.String) throws -> RxSwift.Observable<TiendeoCore.ShoppingList?>
  func getOffersByProducts(names: [Swift.String], countryCode: Swift.String, latitude: Swift.Float, longitude: Swift.Float) -> RxSwift.Observable<[TiendeoCore.ProductOffers]>
}
public protocol StoresDataSource {
  func getStores(lat1: Swift.Float, lon1: Swift.Float, lat2: Swift.Float, lon2: Swift.Float, search: Swift.String, select: Swift.String, count: Swift.Int, countryCode: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.Store]>
  func getNearestStoresById(catalogId: Swift.String, lat: Swift.Float, lon: Swift.Float, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.Store]>
  func getStores(with cityName: Swift.String, retailerName: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.Store]>
  func getDefaultStore(countryCode: Swift.String) throws -> RxSwift.Observable<TiendeoCore.Store?>
  func saveDefaultStore(store: TiendeoCore.Store, countryCode: Swift.String) throws -> RxSwift.Observable<Swift.Bool?>
  func deleteDefaultStore(countryCode: Swift.String) throws -> RxSwift.Observable<Swift.Bool?>
  func getStore(with retailerId: Swift.String, clientStoreId: Swift.String, countryCode: Swift.String) throws -> RxSwift.Observable<TiendeoCore.Store?>
}
extension PrintStatCatalogLocal {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<TiendeoCore.PrintStatCatalogLocal>
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var modelName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var page: Foundation.NSNumber? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var position: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var print: TiendeoCore.PrintStatLocal? {
    @objc get
    @objc set
  }
}
public protocol CashbackRewardsDataSource {
  func getCashbackRewardsLogged(with countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.CashbackReward]>
  func getCashbackRewards(with countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.CashbackReward]>
}
public struct MallItemViewEntity {
  public let id: Swift.String
  public let name: Swift.String
  public let address: Swift.String
  public let zipCode: Swift.String
  public let city: Swift.String
  public let province: Swift.String
  public let suburb: Swift.String
  public let webUrl: Swift.String
  public let phone: Swift.String
  public let latitude: Swift.Float
  public let longitude: Swift.Float
  public let distance: Swift.Float
  public let hasOffers: Swift.Bool
  public let imageUrl: Swift.String
}
extension MallItem {
  public func transformToUI() -> TiendeoCore.MallItemViewEntity
}
public protocol TagBoxesRepository {
  func getTagBoxesByCatalogIdPaginated(catalogId: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  func getSavedTagBoxes(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  func getSavedTagboxesByCatalogId(catalogId: Swift.String) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  func saveTagBox(tagBox: TiendeoCore.TagBox, countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  func deleteTagBox(tagBoxId: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  func sendTagBoxPixelStats(with url: Swift.String) -> RxSwift.Observable<Swift.Bool?>
}
public class GetLatestSearchAllResults {
  public init(searchResultsRepository: TiendeoCore.SearchResultsRepository)
  public func execute(_ requestValues: TiendeoCore.GetLatestSearchResultRequestValues) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  @objc deinit
}
public class DeleteTagBox {
  public init(tagBoxesRepository: TiendeoCore.TagBoxesRepository)
  public func execute(_ requestValues: TiendeoCore.DeleteTagBoxRequestValues) -> RxSwift.Observable<Swift.Bool?>
  @objc deinit
}
public class DeleteTagBoxRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(tagBoxId: Swift.String, countryCode: Swift.String)
  @objc deinit
}
public struct StoreStatsEntity {
  public let storeId: Swift.String
  public let dateTime: Swift.String
  public let timeZoneOffset: Swift.Int
  public let platform: Swift.String
  public let userToken: Swift.String
  public let integration: Swift.String?
  public let userId: Swift.String?
}
extension InputStatsEntity {
  public func transformToStoreStatsEntity(storeId: Swift.String) -> TiendeoCore.StoreStatsEntity
}
public protocol CitiesDataSource {
  func getCity(with id: Swift.String, countryCode: Swift.String) throws -> RxSwift.Observable<TiendeoCore.City?>
}
public class GeofencesDataRepository : TiendeoCore.GeofencesRepository {
  public init(remoteDataSource: TiendeoCore.GeofencesDataSource, localDataSource: TiendeoCore.GeofencesDataSource)
  public func getGeofences(lat: Swift.Float, lon: Swift.Float, count: Swift.Int, countryCode: Swift.String, appName: Swift.String) -> RxSwift.Observable<[TiendeoCore.Geofence]>
  public func markGeofenceAsTriggeredById(_ id: Swift.String) -> RxSwift.Observable<TiendeoCore.Geofence?>
  @objc deinit
}
public class DeleteUserData {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.DeleteUserDataRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class DeleteUserDataRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var appUserId: Swift.String?
  public var userKey: Swift.String?
  public init(baseUrl: Swift.String, appUserId: Swift.String?, userKey: Swift.String?)
  @objc deinit
}
public class SendCatalogToolbarStats {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SendCatalogToolbarStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SendCatalogToolbarStatsRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var catalogEventStatsEntity: TiendeoCore.CatalogEventStatsEntity
  public init(baseUrl: Swift.String, catalogEventStatsEntity: TiendeoCore.CatalogEventStatsEntity)
  @objc deinit
}
extension Date {
  public func days(from date: Foundation.Date) -> Swift.Int
  public var localTime: Swift.String {
    get
  }
  public func resetTime() -> Foundation.Date
  public func stringFormatter() -> Swift.String
  public func transformToReadableString() -> Swift.String
  public func timeTo(date: Foundation.Date) -> Swift.String
  public func toUTC() -> Foundation.Date
}
public struct Mall {
  public var mallId: Swift.String
  public var name: Swift.String?
  public var affinity: Swift.Int?
  public var top: Swift.Int?
  public init(mallId: Swift.String, name: Swift.String?, affinity: Swift.Int?, top: Swift.Int?)
}
public class GetMallById {
  public init(mallRepository: TiendeoCore.MallRepository)
  public func execute(_ requestValues: TiendeoCore.GetMallByIdRequestValues) -> RxSwift.Observable<TiendeoCore.MallItem>
  @objc deinit
}
public class GetMallByIdRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(id: Swift.String, countryCode: Swift.String)
  @objc deinit
}
public class DeleteLoyaltyCardById {
  public init(loyaltyCardsRepository: TiendeoCore.LoyaltyCardsRepository)
  public func execute(_ requestValues: TiendeoCore.DeleteLoyaltyCardByIdRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class DeleteLoyaltyCardByIdRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(id: Swift.String, countryCode: Swift.String)
  @objc deinit
}
public struct GlobalIntegrationsWrapper {
  public let config: TiendeoCore.Config
  public let integration: TiendeoCore.Integration
  public init(config: TiendeoCore.Config, integration: TiendeoCore.Integration)
}
public class PromoCouponRemoteDataSource : TiendeoCore.PromoCouponDataSource {
  public init()
  public func getPromoCouponById(id: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.PromoCoupon>
  public func getPromoCouponsByTypeWithRetailers(_ type: TiendeoCore.PromoCouponType, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.PromoCoupon]>
  public func getInvalidPromoCouponIdsByRetailerIds(countryCode: Swift.String, retailersIds: [Swift.String]) -> RxSwift.Observable<[Swift.String : [Swift.String]]>
  @objc deinit
}
public protocol RetailersDataSource {
  func getRetailers(countryCode: Swift.String, sort: Swift.String) -> RxSwift.Observable<[TiendeoCore.Retailer]>
  func getRetailers(with filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Retailer]>
  func getPromocouponRetailersByIds(country: Swift.String, retailersIds: [Swift.String]) -> RxSwift.Observable<[TiendeoCore.PromoCouponRetailer]>
  func getPromoCouponRetailersByPromoCouponId(promoCouponId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.PromoCouponRetailer]>
}
public struct TagBoxesRemoteDataSource : TiendeoCore.TagBoxesDataSource {
  public init()
  public func getTagBoxesByCatalogIdPaginated(catalogId: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.TagBox]>
  public func getSavedTagBoxes(countryCode: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.TagBox]>
  public func getSavedTagboxesByCatalogId(catalogId: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.TagBox]>
  public func saveTagBox(tagBox: TiendeoCore.TagBox, countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  public func deleteTagBox(tagBoxId: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  public func sendTagBoxPixelStats(with url: Swift.String) -> RxSwift.Observable<Swift.Bool?>
}
public protocol CategoriesDataSource {
  func getCategories(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.CategoryItem]>
  func getCategories(with filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.CategoryItem]>
}
public struct CategoryItem {
  public let id: Swift.String
  public let name: Swift.String
  public let shortName: Swift.String?
  public let imageUrl: Swift.String
  public let url: Swift.String?
  public init(id: Swift.String, name: Swift.String, shortName: Swift.String?, imageUrl: Swift.String, url: Swift.String?)
}
public struct RetailersRemoteDataSource : TiendeoCore.RetailersDataSource {
  public init()
  public func getRetailers(countryCode: Swift.String, sort: Swift.String) -> RxSwift.Observable<[TiendeoCore.Retailer]>
  public func getRetailers(with filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Retailer]>
  public func getPromocouponRetailersByIds(country: Swift.String, retailersIds: [Swift.String]) -> RxSwift.Observable<[TiendeoCore.PromoCouponRetailer]>
  public func getPromoCouponRetailersByPromoCouponId(promoCouponId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.PromoCouponRetailer]>
}
public class GetViewerProIntegrations {
  public init(configRepository: TiendeoCore.ConfigRepository)
  public func execute(_ requestValues: TiendeoCore.GetViewerProIntegrationsRequestValues) -> RxSwift.Observable<TiendeoCore.ViewerProIntegrations>
  @objc deinit
}
public class GetViewerProIntegrationsRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public var provider: Swift.String
  public init(countryCode: Swift.String, provider: Swift.String)
  @objc deinit
}
public class GetRelatedCatalogs {
  public init(catalogRepository: TiendeoCore.CatalogRepository)
  public func execute(_ requestValues: TiendeoCore.GetRelatedCatalogsRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  @objc deinit
}
public class GetRelatedCatalogsRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(catalogId: Swift.String, latitude: Swift.Float, longitude: Swift.Float, search: Swift.String, countryCode: Swift.String)
  @objc deinit
}
public struct RetailerViewEntity {
  public let retailerId: Swift.String
  public let name: Swift.String
  public let imageUrl: Swift.String?
  public let top: Swift.Int?
  public init(retailerId: Swift.String, name: Swift.String, imageUrl: Swift.String?, top: Swift.Int? = nil)
}
extension Retailer {
  public func transformToUI(staticUrl: Swift.String) -> TiendeoCore.RetailerViewEntity?
}
public class SyncFavorites {
  public init(favoritesRepository: TiendeoCore.FavoritesRepository)
  public func execute(_ requestValues: TiendeoCore.SyncFavoritesRequestValues) -> RxSwift.Observable<[TiendeoCore.Favorite]>
  @objc deinit
}
public class SyncFavoritesRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String, appUserId: Swift.String)
  @objc deinit
}
public struct CatalogLocalDataSource : TiendeoCore.CatalogDataSource {
  public init()
  public func getCatalogs(with filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getCatalogById(catalogId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.Catalog?>
  public func getRelatedCatalogs(catalogId: Swift.String, latitude: Swift.Float, longitude: Swift.Float, search: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getCatalogs(latitude: Swift.Float, longitude: Swift.Float, searchWord: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getOffers(latitude: Swift.Float, longitude: Swift.Float, searchWord: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getOffers(with cityName: Swift.String, searchWord: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getCatalogs(with storeId: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getRecommendedCatalogs(latitude: Swift.Float, longitude: Swift.Float, retailerName: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.Catalog]>
}
public enum CatalogsListSectionType {
  case catalogs
  case catalogsRecommended
  case mallBanner
  case favoriteBanner
  public static func == (a: TiendeoCore.CatalogsListSectionType, b: TiendeoCore.CatalogsListSectionType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct CatalogsListSection : TiendeoCore.ListSection {
  public var sectionItem: TiendeoCore.ListItemProtocol?
  public var cellItems: [TiendeoCore.ListItemProtocol]
  public var type: TiendeoCore.CatalogsListSectionType
  public init(sectionItem: TiendeoCore.ListItemProtocol?, cellItems: [TiendeoCore.ListItemProtocol], type: TiendeoCore.CatalogsListSectionType)
}
public struct FavoriteLocalEntity {
  public var id: Swift.String
  public let retailerId: Swift.String
  public let retailerName: Swift.String
  public let city: Swift.String
  public let catalogs: [Swift.String]
  public let latitude: Swift.Float
  public let longitude: Swift.Float
  public let type: Swift.Int
  public let countryCode: Swift.String
}
extension FavoriteLocalEntity {
  public func transformToDomain() -> TiendeoCore.Favorite
  public static func map(dictionary: [Swift.String : Any]) -> TiendeoCore.FavoriteLocalEntity?
}
extension Sequence where Self.Element == TiendeoCore.FavoriteLocalEntity {
  public func transformToArrayOfDictionaries() -> [[Swift.String : Any]]
  public func transformToDomain() -> [TiendeoCore.Favorite]
  public func removeDuplicateFavorites() -> [TiendeoCore.FavoriteLocalEntity]
}
extension FavoriteLocalEntity : Swift.Equatable {
}
public func == (fav1: TiendeoCore.FavoriteLocalEntity, fav2: TiendeoCore.FavoriteLocalEntity) -> Swift.Bool
public struct Catalog {
  public let catalogId: Swift.String
  public let pageNumber: Swift.Int
  public let numPages: Swift.Int
  public let storeId: Swift.String
  public let retailer: TiendeoCore.Retailer?
  public let category: TiendeoCore.TCategory?
  public let expirationDate: Swift.String?
  public let activationDate: Swift.String?
  public let title: Swift.String?
  public let coupon: TiendeoCore.Coupon?
  public let externalUrl: Swift.String?
  public let withAds: Swift.Bool?
  public var width: Swift.Int?
  public var height: Swift.Int?
  public var favoriteId: Swift.String?
  public var description: Swift.String?
  public let sections: [TiendeoCore.CatalogSection]?
  public let showDetails: Swift.Bool?
  public let modelName: Swift.String?
  public let imageTemplate: Swift.String
  public init(catalogId: Swift.String, pageNumber: Swift.Int, numPages: Swift.Int, storeId: Swift.String, retailer: TiendeoCore.Retailer?, category: TiendeoCore.TCategory?, expirationDate: Swift.String?, activationDate: Swift.String?, title: Swift.String?, coupon: TiendeoCore.Coupon?, externalUrl: Swift.String?, withAds: Swift.Bool?, width: Swift.Int?, height: Swift.Int?, favoriteId: Swift.String?, description: Swift.String?, sections: [TiendeoCore.CatalogSection]?, showDetails: Swift.Bool?, modelName: Swift.String?, imageTemplate: Swift.String)
  public func getSmallImagePageUrl() -> Swift.String
  public func getBigImagePageUrl() -> Swift.String
  public func getExpirationDate() -> Foundation.Date?
  public func getActivationDate() -> Foundation.Date?
  public func getExpirationDays() -> Swift.Int?
}
public class GetSearchCityResults {
  public init(searchRepository: TiendeoCore.SearchResultsRepository)
  public func execute(_ requestValues: TiendeoCore.GetSearchCityResultRequestValues) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  @objc deinit
}
public class GetSearchCityResultRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String)
  @objc deinit
}
public class AddProductToList {
  public init(shoppingListsRepository: TiendeoCore.ShoppingListsRepository)
  public func execute(_ requestValues: TiendeoCore.AddProductToListRequestValues) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  @objc deinit
}
public class AddProductToListRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(product: TiendeoCore.Product, shoppingList: TiendeoCore.ShoppingList, countryCode: Swift.String)
  @objc deinit
}
extension Bundle {
  public class var versionNumber: Swift.String {
    get
  }
  public class var buildNumber: Swift.String {
    get
  }
}
public protocol ShoppingListsDataSource {
  func getShoppingList(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList?>
  func addEmptyList(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  func addProductToList(product: TiendeoCore.Product, shoppingList: TiendeoCore.ShoppingList, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  func deleteShoppingLists(countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool>
  func deleteProducts(with ids: [Swift.String], in shoppingListId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList>
}
extension UIView {
  public func roundCorners(_ corners: UIKit.UIRectCorner, radius: CoreGraphics.CGFloat)
  public func addShadow()
  public func deleteShadow()
  public func addConstrained(subview: UIKit.UIView)
}
public struct Alert {
  public let notificationId: Swift.String?
  public let message: Swift.String?
  public let catalogs: [Swift.String]?
  public init(notificationId: Swift.String?, message: Swift.String?, catalogs: [Swift.String]?)
}
public struct StoresLocalDataSource : TiendeoCore.StoresDataSource {
  public init()
  public func getStores(lat1: Swift.Float, lon1: Swift.Float, lat2: Swift.Float, lon2: Swift.Float, search: Swift.String, select: Swift.String, count: Swift.Int, countryCode: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.Store]>
  public func getNearestStoresById(catalogId: Swift.String, lat: Swift.Float, lon: Swift.Float, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.Store]>
  public func getStores(with cityName: Swift.String, retailerName: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.Store]>
  public func getDefaultStore(countryCode: Swift.String) throws -> RxSwift.Observable<TiendeoCore.Store?>
  public func saveDefaultStore(store: TiendeoCore.Store, countryCode: Swift.String) throws -> RxSwift.Observable<Swift.Bool?>
  public func deleteDefaultStore(countryCode: Swift.String) throws -> RxSwift.Observable<Swift.Bool?>
  public func getStore(with retailerId: Swift.String, clientStoreId: Swift.String, countryCode: Swift.String) throws -> RxSwift.Observable<TiendeoCore.Store?>
}
@_inheritsConvenienceInitializers @objc(PrintStatCatalogLocal) public class PrintStatCatalogLocal : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
public protocol CatalogRepository {
  func getCatalogs(with filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  func getCatalogById(catalogId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.Catalog>
  func getRelatedCatalogs(catalogId: Swift.String, latitude: Swift.Float, longitude: Swift.Float, search: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  func getCatalogs(latitude: Swift.Float, longitude: Swift.Float, searchWord: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  func getOffers(latitude: Swift.Float, longitude: Swift.Float, searchWord: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  func getOffers(with cityName: Swift.String, searchWord: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  func getCatalogs(with storeId: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  func getRecommendedCatalogs(latitude: Swift.Float, longitude: Swift.Float, retailerName: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Catalog]>
}
public protocol ConfigRepository {
  func getGlobalIntegrations(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.GlobalIntegrationsWrapper>
  func getViewerProIntegrations(countryCode: Swift.String, provider: Swift.String) -> RxSwift.Observable<TiendeoCore.ViewerProIntegrations>
}
public struct UserDefaultsConstants {
  public static let config: Swift.String
  public static let appUserId: Swift.String
  public static let governorCountryCode: Swift.String
  public static let userKey: Swift.String
  public static let favorites: Swift.String
  public static let geofences: Swift.String
  public static let userDefaultReset: Swift.String
  public struct Settings {
    public static let adsEnabled: Swift.String
    public static let gdprEnabled: Swift.String
    public static let gdprSaved: Swift.String
  }
  public struct FirstInstallation {
    public static let openSelectCity: Swift.String
    public static let openAppTimeStamp: Swift.String
  }
  public struct Ratings {
    public static let openedCatalogsCondition: Swift.String
    public static let numberOfOpenedCatalogs: Swift.String
  }
}
public struct FiltersRemoteDataSource : TiendeoCore.FiltersDataSource {
  public init()
  public func getFilters(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Filter]>
  public func getNewFilters(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Filter]>
}
public class GetSavedTagBoxesByCatalogId {
  public init(tagBoxesRepository: TiendeoCore.TagBoxesRepository)
  public func execute(_ requestValues: TiendeoCore.GetSavedTagBoxesByCatalogIdRequestValues) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  @objc deinit
}
public class GetSavedTagBoxesByCatalogIdRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(catalogId: Swift.String, countryCode: Swift.String)
  @objc deinit
}
extension PrintStatArticleLocal {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<TiendeoCore.PrintStatArticleLocal>
  @objc @NSManaged dynamic public var articleId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var brandId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var catalogId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var position: Swift.Int32 {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var productId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var print: TiendeoCore.PrintStatLocal? {
    @objc get
    @objc set
  }
}
public struct StoreDetail {
  public let storeId: Swift.String
  public let name: Swift.String?
  public let retailer: TiendeoCore.Retailer?
  public let mall: TiendeoCore.Mall?
  public let address: Swift.String?
  public let postalCode: Swift.String?
  public let town: Swift.String?
  public let province: Swift.String?
  public let web: Swift.String?
  public let phone: Swift.String?
  public let lat: Swift.Float?
  public let lon: Swift.Float?
  public let distance: Swift.Float?
  public let description: Swift.String?
  public let horariosSemana: [Swift.String]?
  public let catalogs: [TiendeoCore.Catalog]?
  public let withCatalogs: Swift.Bool
  public init(storeId: Swift.String, name: Swift.String?, retailer: TiendeoCore.Retailer?, mall: TiendeoCore.Mall?, address: Swift.String?, postalCode: Swift.String?, town: Swift.String?, province: Swift.String?, web: Swift.String?, phone: Swift.String?, lat: Swift.Float?, lon: Swift.Float?, distance: Swift.Float?, description: Swift.String?, horariosSemana: [Swift.String]?, catalogs: [TiendeoCore.Catalog]?, withCatalogs: Swift.Bool)
  public func fullAddress() -> Swift.String
  public func mallAndFullAddress() -> Foundation.NSAttributedString
  public func hasSchedules() -> Swift.Bool
  public func scheduleString() -> Swift.String
  public func fullDescription() -> Swift.String
  public func hasPhoneNumber() -> Swift.Bool
  public func phoneNumber() -> Swift.String
  public func hasWebPage() -> Swift.Bool
  public func webPage() -> Swift.String
}
public struct ArticleClipEventStatsEntity {
  public let eventName: Swift.String?
  public let action: Swift.String?
  public let productId: Swift.String?
  public let brandId: Swift.String?
  public let catalogId: Swift.String?
  public let retailerId: Swift.String?
  public let pageNumber: Swift.Int?
  public let searchWord: Swift.String?
  public let searchType: Swift.String?
  public let pageType: Swift.String?
  public let userToken: Swift.String
  public let version: Swift.String
  public let position: Swift.Int?
  public let realLatitude: Swift.Float?
  public let realLongitude: Swift.Float?
  public let selectedLatitude: Swift.Float?
  public let selectedLongitude: Swift.Float?
  public let locationType: Swift.String?
  public let gdprEnabled: Swift.Bool?
  public let view: Swift.String?
  public let integration: Swift.String?
  public let provider: Swift.String?
  public let clientTimeStamp: Swift.String
  public let timeZoneOffset: Swift.Int
  public let platform: Swift.String
  public let origin: Swift.String?
  public let articleId: Swift.String?
  public init(eventName: Swift.String?, action: Swift.String?, productId: Swift.String?, brandId: Swift.String?, catalogId: Swift.String?, retailerId: Swift.String?, pageNumber: Swift.Int?, searchWord: Swift.String?, searchType: Swift.String?, pageType: Swift.String?, userToken: Swift.String, version: Swift.String, position: Swift.Int?, realLatitude: Swift.Float?, realLongitude: Swift.Float?, selectedLatitude: Swift.Float?, selectedLongitude: Swift.Float?, locationType: Swift.String?, gdprEnabled: Swift.Bool?, view: Swift.String?, integration: Swift.String?, provider: Swift.String?, clientTimeStamp: Swift.String, timeZoneOffset: Swift.Int, platform: Swift.String, origin: Swift.String?, articleId: Swift.String?)
}
extension InputStatsEntity {
  public func transformToArticleClipEventStatsEntity() -> TiendeoCore.ArticleClipEventStatsEntity
}
public struct AppUserRemoteDataSource : TiendeoCore.AppUserDataSource {
  public init()
  public func getAppUser(uuid: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.AppUser?>
  public func refreshInfo(countryCode: Swift.String, appInfo: TiendeoCore.AppInfo) -> RxSwift.Observable<Swift.Bool>
}
public struct BannerBasicInfoEntity {
  public let row: Swift.Int
  public let adUnitID: Swift.String
  public let size: CoreGraphics.CGSize
  public static func map(dict: [Swift.String : Any]) -> TiendeoCore.BannerBasicInfoEntity?
  public static func defaultBannersInfo() -> [TiendeoCore.BannerBasicInfoEntity]
}
public protocol MallDataSource {
  func getMalls(with filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.MallItem]>
  func getMall(with id: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.MallItem>
  func getStores(with mallId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Store]>
}
public class GetTagBoxesByCatalogIdPaginated {
  public init(tagBoxesRepository: TiendeoCore.TagBoxesRepository)
  public func execute(_ requestValues: TiendeoCore.GetTagBoxesByCatalogIdPaginatedRequestValues) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  @objc deinit
}
public class GetTagBoxesByCatalogIdPaginatedRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(catalogId: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String)
  @objc deinit
}
public struct SearchResultsRemoteDataSource : TiendeoCore.SearchResultsDataSource {
  public init()
  public func getSearchResults(types: [Swift.String], searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResultSection]>
  public func getSearchProductResults(searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  public func getLatestSearchAllResults(numberOfResults: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  public func getLatestSearchProductResults(numberOfResults: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  public func getLatestSearchLoyaltyCardsResults(numberOfResults: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  public func addSearchResult(searchResult: TiendeoCore.SearchResult, countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  public func getSearchCityResults(searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
}
public class GetCityById {
  public init(citiesRepository: TiendeoCore.CitiesRepository)
  public func execute(_ requestValues: TiendeoCore.GetCityByIdRequestValues) -> RxSwift.Observable<TiendeoCore.City>
  @objc deinit
}
public class GetCityByIdRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(id: Swift.String, countryCode: Swift.String)
  @objc deinit
}
public class DeleteFavoriteById {
  public init(favoritesRepository: TiendeoCore.FavoritesRepository)
  public func execute(_ requestValues: TiendeoCore.DeleteFavoriteByIdRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class DeleteFavoriteByIdRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(favoriteId: Swift.String, countryCode: Swift.String, appUserId: Swift.String)
  @objc deinit
}
public struct StatsConstants {
  public struct EventName {
    public static let catalogBanner: Swift.String
    public static let catalogBottomMenu: Swift.String
  }
  public struct EventAction {
    public static let show: Swift.String
    public static let hideWithoutAds: Swift.String
    public static let hideNoSpace: Swift.String
    public static let pages: Swift.String
    public static let stores: Swift.String
    public static let recommender: Swift.String
    public static let share: Swift.String
  }
  public struct EventType {
    public static let bottom: Swift.String
  }
}
public struct LoyaltyCard {
  public let id: Swift.String
  public let name: Swift.String
  public let retailerId: Swift.String
  public let code: Swift.String
  public let codeFormat: Swift.String
  public let identificationType: Swift.String
  public init(id: Swift.String, name: Swift.String, retailerId: Swift.String, code: Swift.String, codeFormat: Swift.String, identificationType: Swift.String)
}
public class DeleteDefaultStore {
  public init(storesRepository: TiendeoCore.StoresRepository)
  public func execute(_ requestValues: TiendeoCore.DeleteDefaultStoreRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class DeleteDefaultStoreRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String)
  @objc deinit
}
public struct PrintStatCatalogEntity {
  public var id: Swift.String
  public var position: Swift.Int
  public var modelName: Swift.String
  public var page: Swift.Int?
  public init(id: Swift.String, position: Swift.Int, modelName: Swift.String, page: Swift.Int? = nil)
}
@_hasMissingDesignatedInitializers public class ViewerProUserDefaultRepository {
  public class func getDefaultCity() -> TiendeoCore.City?
  public class func removeDefaultCity()
  public class func saveDefaultCity(city: TiendeoCore.City) -> Swift.Bool
  public class func getLastTimeShowedInterstitial() -> Swift.Double?
  public class func saveLastTimeShowedInterstitial(timeStamp: Swift.Double)
  public class func isFavorite(retailerId: Swift.String, countryCode: Swift.String) -> TiendeoCore.Favorite?
  public class func isAdsEnabled() -> Swift.Bool
  public class func showClipsTutorial() -> Swift.Bool
  public class func saveShowClipsTutorial(_ show: Swift.Bool)
  @objc deinit
}
public struct CatalogEventStatsEntity {
  public let eventName: Swift.String
  public let clientTimeStamp: Swift.String
  public let timeZoneOffset: Swift.Int
  public let platform: Swift.String
  public let action: Swift.String
  public let type: Swift.String?
  public init(eventName: Swift.String, action: Swift.String, type: Swift.String? = nil)
}
public class GetOffersByCityAndSearchWord {
  public init(catalogRepository: TiendeoCore.CatalogRepository)
  public func execute(_ requestValues: TiendeoCore.GetOffersByCityAndSearchWordRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  @objc deinit
}
public class GetOffersByCityAndSearchWordRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(cityName: Swift.String, searchWord: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String)
  @objc deinit
}
public class GetSearchLoyaltyCardsResults {
  public init(searchResultsRepository: TiendeoCore.SearchResultsRepository)
  public func execute(_ requestValues: TiendeoCore.GetSearchResultRequestValues) -> RxSwift.Observable<[TiendeoCore.SearchResultSection]>
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class PrivacyPolicyView : UIKit.UIView {
  public class func loadView() -> TiendeoCore.PrivacyPolicyView?
  public func calculateHeight(with containerWidth: CoreGraphics.CGFloat) -> CoreGraphics.CGFloat
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public class GetArticlesWithStatus {
  public init(tagBoxesRepository: TiendeoCore.TagBoxesRepository)
  public func execute(_ requestValues: TiendeoCore.GetArticlesWithStatusRequestValues) -> RxSwift.Observable<[TiendeoCore.Article]>
  @objc deinit
}
public class GetArticlesWithStatusRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(articlesObservable: RxSwift.Observable<[TiendeoCore.Article]>, countryCode: Swift.String)
  @objc deinit
}
public class GetAlerts {
  public init(alertsRepository: TiendeoCore.AlertsRepository)
  public func execute(_ requestValues: TiendeoCore.GetAlertsRequestValues) -> RxSwift.Observable<[TiendeoCore.Alert]>
  @objc deinit
}
public class GetAlertsRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String)
  @objc deinit
}
public struct TiendeoCountriesDataRepository : TiendeoCore.TiendeoCountriesRepository {
  public init(dataSources: [TiendeoCore.TiendeoCountriesDataSource])
  public func getTiendeoCountries() -> RxSwift.Observable<[TiendeoCore.TiendeoCountry]>
  public func getTiendeoCountryByCountryCode(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.TiendeoCountry?>
}
public class GetCatalogsByStore {
  public init(catalogRepository: TiendeoCore.CatalogRepository)
  public func execute(_ requestValues: TiendeoCore.GetCatalogsByStoreRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  @objc deinit
}
public class GetCatalogsByStoreRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(storeId: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String)
  @objc deinit
}
public struct TagBoxesDataRepository : TiendeoCore.TagBoxesRepository {
  public init(dataSources: [TiendeoCore.TagBoxesDataSource])
  public func getTagBoxesByCatalogIdPaginated(catalogId: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  public func getSavedTagBoxes(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  public func getSavedTagboxesByCatalogId(catalogId: Swift.String) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  public func saveTagBox(tagBox: TiendeoCore.TagBox, countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  public func deleteTagBox(tagBoxId: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  public func sendTagBoxPixelStats(with url: Swift.String) -> RxSwift.Observable<Swift.Bool?>
}
public protocol GeofencesRepository {
  func getGeofences(lat: Swift.Float, lon: Swift.Float, count: Swift.Int, countryCode: Swift.String, appName: Swift.String) -> RxSwift.Observable<[TiendeoCore.Geofence]>
  func markGeofenceAsTriggeredById(_ id: Swift.String) -> RxSwift.Observable<TiendeoCore.Geofence?>
}
@_hasMissingDesignatedInitializers public class UserDefaultRepository : TiendeoCore.KeyValueRepository {
  public class func saveObject(key: Swift.String, value: Any)
  public class func loadObject(key: Swift.String) -> Any?
  public class func loadString(key: Swift.String) -> Swift.String?
  public class func saveBoolean(key: Swift.String, value: Swift.Bool)
  public class func loadBoolean(key: Swift.String) -> Swift.Bool?
  public class func remove(key: Swift.String)
  public class func resetUserDefaultIfNeeded()
  @objc deinit
}
public protocol KeyValueRepository {
  static func saveObject(key: Swift.String, value: Any)
  static func loadString(key: Swift.String) -> Swift.String?
  static func resetUserDefaultIfNeeded()
  static func saveBoolean(key: Swift.String, value: Swift.Bool)
  static func loadBoolean(key: Swift.String) -> Swift.Bool?
  static func remove(key: Swift.String)
}
public class GetFavorites {
  public init(favoritesRepository: TiendeoCore.FavoritesRepository)
  public func execute(_ requestValues: TiendeoCore.GetFavoritesRequestValues) -> RxSwift.Observable<[TiendeoCore.Favorite]>
  @objc deinit
}
public class GetFavoritesRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public var appUserId: Swift.String
  public init(countryCode: Swift.String, appUserId: Swift.String)
  @objc deinit
}
public struct NavigationStatsEntity {
  public let searchWord: Swift.String?
  public let searchType: Swift.String?
  public let pageType: Swift.String?
  public let userToken: Swift.String
  public let version: Swift.String
  public let position: Swift.Int?
  public let realLatitude: Swift.Float?
  public let realLongitude: Swift.Float?
  public let selectedLatitude: Swift.Float?
  public let selectedLongitude: Swift.Float?
  public let locationType: Swift.String?
  public let retailerId: Swift.String?
  public let gdprEnabled: Swift.Bool?
  public let view: Swift.String?
  public let integration: Swift.String?
  public let provider: Swift.String?
  public let clientTimeStamp: Swift.String
  public let timeZoneOffset: Swift.Int
  public let platform: Swift.String
  public let origin: Swift.String?
  public let numResults: Swift.Int
  public init(searchWord: Swift.String?, searchType: Swift.String?, pageType: Swift.String?, userToken: Swift.String, version: Swift.String, position: Swift.Int?, realLatitude: Swift.Float?, realLongitude: Swift.Float?, selectedLatitude: Swift.Float?, selectedLongitude: Swift.Float?, locationType: Swift.String?, retailerId: Swift.String?, gdprEnabled: Swift.Bool?, view: Swift.String?, integration: Swift.String?, provider: Swift.String?, clientTimeStamp: Swift.String, timeZoneOffset: Swift.Int, platform: Swift.String, origin: Swift.String?, numResults: Swift.Int)
}
extension InputStatsEntity {
  public func transformToNavigationStatsEntity() -> TiendeoCore.NavigationStatsEntity
}
public struct ProductsRemoteDataSource : TiendeoCore.ProductsDataSource {
  public init()
  public func getTopProducts(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Product]>
  public func updateProductStatus(product: TiendeoCore.Product, shoppingList: TiendeoCore.ShoppingList, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList?>
  public func getOffersByProducts(names: [Swift.String], countryCode: Swift.String, latitude: Swift.Float, longitude: Swift.Float) -> RxSwift.Observable<[TiendeoCore.ProductOffers]>
}
public struct CatalogSectionViewEntity {
  public let id: Swift.String
  public let catalogId: Swift.String
  public let name: Swift.String
  public let page: Swift.Int
  public let category: Swift.Int
  public let pageRange: Swift.ClosedRange<Swift.Int>
  public init(id: Swift.String, catalogId: Swift.String, name: Swift.String, page: Swift.Int, category: Swift.Int, pageRange: Swift.ClosedRange<Swift.Int>)
}
extension CatalogSection {
  public func transformToUI(with range: Swift.ClosedRange<Swift.Int>) -> TiendeoCore.CatalogSectionViewEntity
}
extension Sequence where Self.Element == TiendeoCore.CatalogSection {
  public func transformToUI(numPages: Swift.Int) -> [TiendeoCore.CatalogSectionViewEntity]
}
extension UIImageView {
  public func downloadFrom(url: Swift.String, placeHolder: UIKit.UIImage? = nil, options: [Kingfisher.KingfisherOptionsInfoItem]? = nil, progressBlock: Kingfisher.DownloadProgressBlock? = nil, completionHandler: Kingfisher.CompletionHandler? = nil)
  public func downloadFrom(url: Swift.String, placeHolder: UIKit.UIImage? = nil, completionHandler: @escaping (UIKit.UIImage?) -> Swift.Void)
  public func downloadKeepingCurrentImageFrom(url: Swift.String)
}
public struct CoreConstants {
  public struct Provider {
    public static let tiendeo: Swift.String
  }
  public struct Stats {
    public static let undefined: Swift.String
    public static let platform: Swift.String
  }
  public struct PromoCoupon {
  }
}
public class MallRemoteDataSource : TiendeoCore.MallDataSource {
  public init()
  public func getMalls(with filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.MallItem]>
  public func getMall(with id: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.MallItem>
  public func getStores(with mallId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Store]>
  @objc deinit
}
public class GetRetailers {
  public init(retailersRepository: TiendeoCore.RetailersRepository)
  public func execute(_ requestValues: TiendeoCore.GetRetailersRequestValues) -> RxSwift.Observable<[TiendeoCore.Retailer]>
  @objc deinit
}
public class GetRetailersRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public var sort: Swift.String
  public init(countryCode: Swift.String, sort: Swift.String? = "+top")
  @objc deinit
}
public struct Retailer {
  public let retailerId: Swift.String?
  public let name: Swift.String?
  public let afinidad: Swift.Int?
  public let top: Swift.Int?
  public init(retailerId: Swift.String?, name: Swift.String?, afinidad: Swift.Int? = nil, top: Swift.Int? = nil)
  public func imageUrl(staticUrl: Swift.String) -> Swift.String
  public static func imageUrl(staticUrl: Swift.String, retailerId: Swift.String?) -> Swift.String
}
@_inheritsConvenienceInitializers @objc(PrintStatArticleLocal) public class PrintStatArticleLocal : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
public struct FavoritesLocalDataSource : TiendeoCore.FavoritesDataSource {
  public init()
  public func getFavorites(countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<[TiendeoCore.Favorite]>
  public func addFavorites(favorites: [TiendeoCore.Favorite], countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<Swift.Bool>
  public func deleteFavoriteBy(favoriteId: Swift.String, countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<Swift.Bool>
}
public enum PromoCouponType : Swift.Int {
  case print
  case gift
  case loyalty
  case cashback
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public struct PromoTag {
  public let id: Swift.String
  public let type: TiendeoCore.PromoCouponType
  public let isSaved: Swift.Bool
  public init(id: Swift.String, type: TiendeoCore.PromoCouponType, isSaved: Swift.Bool)
}
public struct AppUser {
  public let appUserId: Swift.String?
  public let userKey: Swift.String?
  public init(appUserId: Swift.String?, userKey: Swift.String?)
}
public struct ConfigRemoteDataSource : TiendeoCore.ConfigDataSource {
  public init()
  public func getGlobalIntegrations(countryCode: Swift.String) throws -> RxSwift.Observable<TiendeoCore.GlobalIntegrationsWrapper?>
  public func getViewerProIntegrations(countryCode: Swift.String, provider: Swift.String) throws -> RxSwift.Observable<TiendeoCore.ViewerProIntegrations>
}
public class DeleteProductsInList {
  public init(shoppingListsRepository: TiendeoCore.ShoppingListsRepository)
  public func execute(_ requestValues: TiendeoCore.DeleteProductsInListRequestValues) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  @objc deinit
}
public class DeleteProductsInListRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(productsIds: [Swift.String], shoppingListId: Swift.String, countryCode: Swift.String)
  @objc deinit
}
public struct ProductsDataRepository : TiendeoCore.ProductsRepository {
  public init(dataSources: [TiendeoCore.ProductsDataSource])
  public func getTopProducts(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Product]>
  public func updateProductStatus(product: TiendeoCore.Product, shoppingList: TiendeoCore.ShoppingList, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  public func getOffersByProducts(names: [Swift.String], countryCode: Swift.String, latitude: Swift.Float, longitude: Swift.Float) -> RxSwift.Observable<[TiendeoCore.ProductOffers]>
}
public struct Config {
  public let urlFacebook: Swift.String
  public let urlTwitter: Swift.String
  public let urlLegalAdv: Swift.String
  public let prefixReplace: Swift.String
  public let prefixStatic: Swift.String
  public let staticsValues: Swift.String
  public let urlLicences: Swift.String
  public let urlAboutTiendeo: Swift.String
  public let urlConditionsOfUse: Swift.String
  public let urlPrivacyPolicy: Swift.String
  public let rutaWeb: Swift.String
  public let clicksForRate: Swift.Int
  public let adMobLanding: Swift.Bool
  public let staticUrl: Swift.String
  public let baseUrlStatsApi: Swift.String
  public let pathCatalogs: Swift.String
  public let pathCoupons: Swift.String
  public init(urlFacebook: Swift.String, urlTwitter: Swift.String, urlLegalAdv: Swift.String, prefixReplace: Swift.String, prefixStatic: Swift.String, staticsValues: Swift.String, urlLicences: Swift.String, urlAboutTiendeo: Swift.String, urlConditionsOfUse: Swift.String, urlPrivacyPolicy: Swift.String, rutaWeb: Swift.String, clicksForRate: Swift.Int, adMobLanding: Swift.Bool, staticUrl: Swift.String, baseUrlStatsApi: Swift.String, pathCatalogs: Swift.String, pathCoupons: Swift.String)
}
public struct NotificationStatsEventEntity {
  public init(action: Swift.String?, catalogId: Swift.String?, channel: Swift.String?, clientTimeStamp: Swift.String?, eventName: Swift.String?, notificationId: Swift.String?, latitude: Swift.Float?, longitude: Swift.Float?, os: Swift.String?, platform: Swift.String?, provider: Swift.String?, selectedLatitude: Swift.Float?, selectedLongitude: Swift.Float?, country: Swift.String?, senderToken: Swift.String?, timeZoneOffset: Swift.Int?, userToken: Swift.String?, version: Swift.String?, type: Swift.String?, modelName: Swift.String?, idGeofence: Swift.String?, retailerId: Swift.String?, categoryId: Swift.String?)
}
extension InputStatsEntity {
  public func transformToNotificationStatsEventEntity(type: Swift.String?, modelName: Swift.String?, countryCode: Swift.String?, idGeofence: Swift.String? = nil) -> TiendeoCore.NotificationStatsEventEntity
}
public enum RepositoryErrors : Swift.Int, Swift.Error {
  case unsupportedOperationException
  case executeException
  case parametersException
  case jsonError
  case urlFormat
  case loginNeeded
  case wrongDataSource
  public var localizedDescription: Swift.String {
    get
  }
  public var code: Swift.Int {
    get
  }
  public typealias RawValue = Swift.Int
  public init?(rawValue: Swift.Int)
  public var rawValue: Swift.Int {
    get
  }
}
public class GetAppUser {
  public init(userRepository: TiendeoCore.AppUserRepository)
  public func execute(_ requestValues: TiendeoCore.GetAppUserRequestValues) -> RxSwift.Observable<TiendeoCore.AppUser?>
  @objc deinit
}
public class GetAppUserRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public var uuid: Swift.String
  public init(uuid: Swift.String, countryCode: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class SliderItemCollectionViewCell : UIKit.UICollectionViewCell, TiendeoCore.CollectionViewCellProtocol {
  @objc override dynamic public func awakeFromNib()
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol GeofencesDataSource {
  func getGeofences(lat: Swift.Float, lon: Swift.Float, count: Swift.Int, countryCode: Swift.String, appName: Swift.String) -> RxSwift.Observable<[TiendeoCore.Geofence]>
  func saveGeofences(geofences: [TiendeoCore.Geofence]) -> RxSwift.Observable<[TiendeoCore.Geofence]>
  func getTriggeredGeofences() -> RxSwift.Observable<[TiendeoCore.Geofence]>
  func markGeofenceAsTriggeredById(_ id: Swift.String) -> RxSwift.Observable<TiendeoCore.Geofence?>
  func deleteNonTriggeredGeofences() -> RxSwift.Observable<Swift.Bool>
  func updateTriggeredGeofencesStatus() -> RxSwift.Observable<Swift.Bool>
}
public struct CategoriesRemoteDataSource : TiendeoCore.CategoriesDataSource {
  public init()
  public func getCategories(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.CategoryItem]>
  public func getCategories(with filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.CategoryItem]>
}
public protocol CategoriesRepository {
  func getCategories(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.CategoryItem]>
  func getCategories(with filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.CategoryItem]>
}
@objc @_inheritsConvenienceInitializers open class ContentListCollectionViewCell : UIKit.UICollectionViewCell, TiendeoCore.ListCollectionViewCellProtocol {
  @objc @IBOutlet weak public var catalogImageView: TiendeoCore.UIImageViewAligned!
  @objc @IBOutlet weak public var expirationLabel: UIKit.UILabel!
  @objc @IBOutlet weak public var retailerLabel: UIKit.UILabel!
  @objc override dynamic open func awakeFromNib()
  open func setupCell(with item: TiendeoCore.ListItem)
  open func setupCell(with item: TiendeoCore.ListItemProtocol)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public class CashbackReward {
  public var id: Swift.String?
  public var promoCouponsId: [Swift.String]
  public var unitsLimit: Swift.Int
  public var unitsUsed: Swift.Int
  public var completed: Swift.Bool
  public var mandatory: Swift.Bool
  public init(id: Swift.String, promoCouponsId: [Swift.String], unitsLimit: Swift.Int, unitsUsed: Swift.Int, completed: Swift.Bool, mandatory: Swift.Bool)
  @objc deinit
}
public class SaveDefaultStore {
  public init(storesRepository: TiendeoCore.StoresRepository)
  public func execute(_ requestValues: TiendeoCore.SaveDefaultStoreRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SaveDefaultStoreRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(store: TiendeoCore.Store, countryCode: Swift.String)
  @objc deinit
}
public struct PrintStatArticleEntity {
  public var articleId: Swift.String
  public var productId: Swift.String
  public var catalogId: Swift.String
  public var brandId: Swift.String
  public var position: Swift.Int
  public init(articleId: Swift.String, productId: Swift.String, catalogId: Swift.String, brandId: Swift.String, position: Swift.Int)
}
public class GetLatestSearchProductResults {
  public init(searchResultsRepository: TiendeoCore.SearchResultsRepository)
  public func execute(_ requestValues: TiendeoCore.GetLatestSearchResultRequestValues) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  @objc deinit
}
public enum FilterType : Swift.String {
  case tabFavorites
  case tab
  case category
  case retailer
  case mall
  case deals
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct Filter {
  public let requestBody: [Swift.String : Any?]?
  public let requestHeader: [Swift.String : Swift.String?]?
  public let requestUrl: Swift.String
  public let mapping: Swift.Bool
  public let labelText: Swift.String
  public let localizeStringKey: Swift.String
  public let method: Swift.String
  public let defaultScreen: Swift.Bool
  public let type: TiendeoCore.FilterType
  public init(requestBody: [Swift.String : Any?]?, requestHeader: [Swift.String : Swift.String?]?, requestUrl: Swift.String, mapping: Swift.Bool, labelText: Swift.String, localizeStringKey: Swift.String, method: Swift.String, defaultScreen: Swift.Bool, type: TiendeoCore.FilterType)
}
public class SendArticleBuyStats {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SendArticleBuyStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SendArticleBuyStatsRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var articleStatsEntity: TiendeoCore.ArticleStatsEntity
  public init(baseUrl: Swift.String, articleStatsEntity: TiendeoCore.ArticleStatsEntity)
  @objc deinit
}
public protocol SearchResultsDataSource {
  func getSearchResults(types: [Swift.String], searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResultSection]>
  func getSearchProductResults(searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  func getLatestSearchAllResults(numberOfResults: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  func getLatestSearchProductResults(numberOfResults: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  func getLatestSearchLoyaltyCardsResults(numberOfResults: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  func addSearchResult(searchResult: TiendeoCore.SearchResult, countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  func getSearchCityResults(searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
}
public protocol AppUserDataSource {
  func getAppUser(uuid: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.AppUser?>
  func refreshInfo(countryCode: Swift.String, appInfo: TiendeoCore.AppInfo) -> RxSwift.Observable<Swift.Bool>
}
public protocol FavoritesDataSource {
  func getFavorites(countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<[TiendeoCore.Favorite]>
  func addFavorites(favorites: [TiendeoCore.Favorite], countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<Swift.Bool>
  func deleteFavoriteBy(favoriteId: Swift.String, countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<Swift.Bool>
}
public struct SearchResultsDataRepository : TiendeoCore.SearchResultsRepository {
  public init(dataSources: [TiendeoCore.SearchResultsDataSource])
  public func getSearchResults(types: [Swift.String], searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResultSection]>
  public func getSearchProductResults(searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  public func getLatestSearchAllResults(numberOfResults: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  public func getLatestSearchProductResults(numberOfResults: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  public func getLatestSearchLoyaltyCardsResults(numberOfResults: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  public func addSearchResult(searchResult: TiendeoCore.SearchResult, countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool>
  public func getSearchCityResults(searchName: Swift.String, pageNumber: Swift.Int, numberOfResultsPerPage: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
}
public protocol PromoCouponRepository {
  func getPromoCouponById(_ id: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.PromoCoupon>
  func getPromoCouponsByTypeWithRetailers(_ type: TiendeoCore.PromoCouponType, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.PromoCoupon]>
  func getPromoCouponUser(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.PromoCouponUser]>
  func addPromocouponUser(promoCouponUser: TiendeoCore.PromoCouponUser, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.PromoCouponUser>
  func addPromoCouponsUser(promoCouponIds: [Swift.String], countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.PromoCouponUser]>
  func getInvalidPromoCouponIdsByRetailerIds(countryCode: Swift.String, retailersIds: [Swift.String]) -> RxSwift.Observable<[Swift.String : [Swift.String]]>
}
public class GetSearchRetailersResults {
  public init(searchResultsRepository: TiendeoCore.SearchResultsRepository)
  public func execute(_ requestValues: TiendeoCore.GetSearchResultRequestValues) -> RxSwift.Observable<[TiendeoCore.SearchResultSection]>
  @objc deinit
}
public struct StoresDataRepository : TiendeoCore.StoresRepository {
  public init(remoteDataSource: TiendeoCore.StoresDataSource, localDataSource: TiendeoCore.StoresDataSource)
  public func getStores(lat1: Swift.Float, lon1: Swift.Float, lat2: Swift.Float, lon2: Swift.Float, search: Swift.String, select: Swift.String, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Store]>
  public func getNearestStoresById(catalogId: Swift.String, lat: Swift.Float, lon: Swift.Float, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Store]>
  public func getStores(with cityName: Swift.String, retailerName: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Store]>
  public func getDefaultStore(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.Store?>
  public func saveDefaultStore(store: TiendeoCore.Store, countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool>
  public func deleteDefaultStore(countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool>
  public func getStore(with retailerId: Swift.String, clientStoreId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.Store>
}
extension GeofenceLocal {
  @nonobjc public class func fetchRequest() -> CoreData.NSFetchRequest<TiendeoCore.GeofenceLocal>
  @objc @NSManaged dynamic public var id: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var latitude: Swift.Float {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var longitude: Swift.Float {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var name: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var message: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var radius: Swift.Float {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var type: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var transition: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var triggersAgain: Swift.Double {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var retailerId: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var appName: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var start: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var end: Foundation.Date? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var action: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var deeplink: Swift.String? {
    @objc get
    @objc set
  }
  @objc @NSManaged dynamic public var triggeredDate: Foundation.Date? {
    @objc get
    @objc set
  }
}
public struct CatalogSection {
  public let id: Swift.String
  public let catalogId: Swift.String
  public let name: Swift.String
  public let page: Swift.Int
  public let category: Swift.Int
  public init(id: Swift.String, catalogId: Swift.String, name: Swift.String, page: Swift.Int, category: Swift.Int)
}
public struct AppUserDataRepository : TiendeoCore.AppUserRepository {
  public init(remoteDataSource: TiendeoCore.AppUserDataSource)
  public func getAppUser(uuid: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.AppUser?>
  public func refreshInfo(countryCode: Swift.String, appInfo: TiendeoCore.AppInfo) -> RxSwift.Observable<Swift.Bool>
}
public struct Favorite {
  public var id: Swift.String
  public let retailerId: Swift.String
  public let retailerName: Swift.String?
  public let city: Swift.String?
  public let catalogs: [Swift.String]?
  public let latitude: Swift.Float?
  public let longitude: Swift.Float?
  public let type: Swift.Int?
  public let countryCode: Swift.String?
  public init(id: Swift.String, retailerId: Swift.String, retailerName: Swift.String?, city: Swift.String?, catalogs: [Swift.String]?, latitude: Swift.Float?, longitude: Swift.Float?, type: Swift.Int?, countryCode: Swift.String? = "")
}
extension Favorite {
  public static func map(dictionary: [Swift.String : Any]) -> TiendeoCore.Favorite?
}
public struct FavoriteType {
  public static let retailer: Swift.String
}
@objc @_inheritsConvenienceInitializers public class CatalogListCollectionViewCell : TiendeoCore.ContentListCollectionViewCell {
  public var didPressFavoriteButton: (() -> Swift.Void)?
  @objc override dynamic public func awakeFromNib()
  override public func setupCell(with item: TiendeoCore.ListItem)
  override public func setupCell(with item: TiendeoCore.ListItemProtocol)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public class GetFilters {
  public init(filtersRepository: TiendeoCore.FiltersRepository)
  public func execute(_ requestValues: TiendeoCore.GetFiltersRequestValues) -> RxSwift.Observable<[TiendeoCore.Filter]>
  @objc deinit
}
public class GetFiltersRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String)
  @objc deinit
}
public struct AlertsRemoteDataSource : TiendeoCore.AlertsDataSource {
  public init()
  public func getAlerts(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Alert]>
}
extension Int {
  public func transformToFormattedNumberWith(numberOfDigits: Swift.Int) -> Swift.String
}
extension Int : Swift.Sequence {
  public func makeIterator() -> Swift.CountableRange<Swift.Int>.Iterator
  public typealias Element = Swift.IndexingIterator<Swift.Range<Swift.Int>>.Element
  public typealias Iterator = Swift.CountableRange<Swift.Int>.Iterator
}
public class PromoCouponRetailer {
  final public let id: Swift.String
  final public let name: Swift.String?
  final public let seoName: Swift.String?
  final public let logoURL: Swift.String?
  final public let promoCouponExternalId: Swift.String?
  final public let promoCouponExternalData: Swift.String?
  public init(id: Swift.String, name: Swift.String?, seoName: Swift.String?, logoURL: Swift.String?, promoCouponExternalId: Swift.String?, promoCouponExternalData: Swift.String?)
  @objc deinit
}
public protocol AlertsDataSource {
  func getAlerts(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Alert]>
}
public class GetRecommendedArticlesByLatLonAndSearchWord {
  public init(articleRepository: TiendeoCore.ArticleRepository)
  public func execute(_ requestValues: TiendeoCore.GetRecommendedArticlesByLatLonAndSearchWordRequestValues) -> RxSwift.Observable<[TiendeoCore.Article]>
  @objc deinit
}
public class GetRecommendedArticlesByLatLonAndSearchWordRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(latitude: Swift.Float, longitude: Swift.Float, searchWord: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String)
  @objc deinit
}
public struct Integration {
  public let geofencesRefreshMinutes: Swift.Double
  public let showCashback: Swift.Bool
  public let cashbackReferralPosition: Swift.Int?
  public let showRetailersAlphabetScroller: Swift.Bool
  public let referralTotalAmount: Swift.String?
  public let cashbackTutorialPosition: Swift.Int?
  public let cashbackRetailersFilters: [Swift.String]
  public init(geofencesRefreshMinutes: Swift.Double, showCashback: Swift.Bool, cashbackReferralPosition: Swift.Int?, showRetailersAlphabetScroller: Swift.Bool, referralTotalAmount: Swift.String?, cashbackTutorialPosition: Swift.Int?, cashbackRetailersFilters: [Swift.String])
}
public protocol CashbackRewardsRepository {
  func getCashbackRewards(with countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.CashbackReward]>
}
public class GetCatalogById {
  public init(catalogRepository: TiendeoCore.CatalogRepository)
  public func execute(_ requestValues: TiendeoCore.GetCatalogRequestValues) -> RxSwift.Observable<TiendeoCore.Catalog>
  @objc deinit
}
public class GetCatalogRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(catalogId: Swift.String, countryCode: Swift.String)
  @objc deinit
}
public class SendStoreOpeningStats {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SendStoreOpeningStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SendStoreOpeningStatsRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var storeStatsEntity: TiendeoCore.StoreStatsEntity
  public init(baseUrl: Swift.String, storeStatsEntity: TiendeoCore.StoreStatsEntity)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CustomBannerListCollectionViewCell : UIKit.UICollectionViewCell, TiendeoCore.ListCollectionViewCellProtocol {
  public func setupCell(with item: TiendeoCore.ListItem)
  public func setupCell(with item: TiendeoCore.ListItemProtocol)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public protocol FiltersRepository {
  func getFilters(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Filter]>
  func getNewFilters(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Filter]>
}
public protocol CitiesRepository {
  func getCity(with id: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.City>
}
public struct UIImageViewAlignmentMask : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let center: TiendeoCore.UIImageViewAlignmentMask
  public static let left: TiendeoCore.UIImageViewAlignmentMask
  public static let right: TiendeoCore.UIImageViewAlignmentMask
  public static let top: TiendeoCore.UIImageViewAlignmentMask
  public static let bottom: TiendeoCore.UIImageViewAlignmentMask
  public static let topLeft: TiendeoCore.UIImageViewAlignmentMask
  public static let topRight: TiendeoCore.UIImageViewAlignmentMask
  public static let bottomLeft: TiendeoCore.UIImageViewAlignmentMask
  public static let bottomRight: TiendeoCore.UIImageViewAlignmentMask
  public typealias Element = TiendeoCore.UIImageViewAlignmentMask
  public typealias ArrayLiteralElement = TiendeoCore.UIImageViewAlignmentMask
  public typealias RawValue = Swift.Int
}
@objc @_inheritsConvenienceInitializers @IBDesignable open class UIImageViewAligned : UIKit.UIImageView {
  open var alignment: TiendeoCore.UIImageViewAlignmentMask {
    get
    set
  }
  @objc override dynamic open var image: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc override dynamic open var highlightedImage: UIKit.UIImage? {
    @objc get
    @objc set
  }
  @objc @IBInspectable open var alignTop: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable open var alignLeft: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable open var alignRight: Swift.Bool {
    @objc get
    @objc set
  }
  @objc @IBInspectable open var alignBottom: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic open var isHighlighted: Swift.Bool {
    @objc get
    @objc set
  }
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc override dynamic public init(image: UIKit.UIImage?)
  @objc override dynamic public init(image: UIKit.UIImage?, highlightedImage: UIKit.UIImage?)
  @objc required dynamic public init?(coder aDecoder: Foundation.NSCoder)
  @objc override dynamic open func layoutSubviews()
  @objc override dynamic open func didMoveToSuperview()
  @objc override dynamic open func didMoveToWindow()
  @objc deinit
}
public protocol PromoCouponDataSource {
  func getPromoCouponById(id: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.PromoCoupon>
  func getPromoCouponsByTypeWithRetailers(_ type: TiendeoCore.PromoCouponType, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.PromoCoupon]>
  func getPromoCouponUser(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.PromoCouponUser]>
  func addPromocouponUser(promoCouponUser: TiendeoCore.PromoCouponUser, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.PromoCouponUser>
  func addPromoCouponsUser(promoCouponIds: [Swift.String], countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.PromoCouponUser]>
  func getInvalidPromoCouponIdsByRetailerIds(countryCode: Swift.String, retailersIds: [Swift.String]) -> RxSwift.Observable<[Swift.String : [Swift.String]]>
}
public struct ProductOffers {
  public let name: Swift.String
  public let offers: Swift.Int
  public init(name: Swift.String, offers: Swift.Int)
}
public enum SliderItemType {
  case favorites
  public static func == (a: TiendeoCore.SliderItemType, b: TiendeoCore.SliderItemType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct SliderItem {
  public let id: Swift.String
  public let cellIdentifier: Swift.String
  public let type: TiendeoCore.SliderItemType
  public let favorite: TiendeoCore.FavoriteViewEntity?
  public init(id: Swift.String, cellIdentifier: Swift.String, type: TiendeoCore.SliderItemType, favorite: TiendeoCore.FavoriteViewEntity?)
}
public struct GdprEntity {
  public let userToken: Swift.String?
  public let userKey: Swift.String?
  public let platform: Swift.String?
  public let provider: Swift.String?
  public let type: Swift.String?
  public let mail: Swift.String?
  public let complianceText: Swift.String?
  public let clientTimestamp: Swift.String?
  public let response: Swift.String?
  public init(userToken: Swift.String?, userKey: Swift.String?, platform: Swift.String?, provider: Swift.String?, type: Swift.String?, mail: Swift.String?, complianceText: Swift.String?, clientTimestamp: Swift.String?, response: Swift.String?)
}
public protocol TagBoxesDataSource {
  func getTagBoxesByCatalogIdPaginated(catalogId: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.TagBox]>
  func getSavedTagBoxes(countryCode: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.TagBox]>
  func getSavedTagboxesByCatalogId(catalogId: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.TagBox]>
  func saveTagBox(tagBox: TiendeoCore.TagBox, countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  func deleteTagBox(tagBoxId: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  func sendTagBoxPixelStats(with url: Swift.String) -> RxSwift.Observable<Swift.Bool?>
}
public struct Geofence {
  public let id: Swift.String
  public let lat: Swift.Float
  public let lon: Swift.Float
  public let name: Swift.String
  public let message: Swift.String
  public let radius: Swift.Float
  public let type: Swift.String
  public let transition: Swift.String
  public let triggersAgain: Swift.Double
  public let retailerId: Swift.String
  public let appName: Swift.String
  public let start: Foundation.Date
  public let end: Foundation.Date
  public let action: Swift.String
  public let deeplink: Swift.String
  public init(id: Swift.String, lat: Swift.Float, lon: Swift.Float, name: Swift.String, message: Swift.String, radius: Swift.Float, type: Swift.String, transition: Swift.String, triggersAgain: Swift.Double, retailerId: Swift.String, appName: Swift.String, start: Foundation.Date, end: Foundation.Date, action: Swift.String, deeplink: Swift.String)
}
public struct PromoCouponDataRepository : TiendeoCore.PromoCouponRepository {
  public init(remoteDataSource: TiendeoCore.PromoCouponDataSource)
  public func getPromoCouponById(_ id: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.PromoCoupon>
  public func getPromoCouponsByTypeWithRetailers(_ type: TiendeoCore.PromoCouponType, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.PromoCoupon]>
  public func getPromoCouponUser(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.PromoCouponUser]>
  public func addPromocouponUser(promoCouponUser: TiendeoCore.PromoCouponUser, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.PromoCouponUser>
  public func addPromoCouponsUser(promoCouponIds: [Swift.String], countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.PromoCouponUser]>
  public func getInvalidPromoCouponIdsByRetailerIds(countryCode: Swift.String, retailersIds: [Swift.String]) -> RxSwift.Observable<[Swift.String : [Swift.String]]>
}
public class GetStoresByCityAndRetailer {
  public init(storesRepository: TiendeoCore.StoresRepository)
  public func execute(_ requestValues: TiendeoCore.GetStoresByCityAndRetailerRequestValues) -> RxSwift.Observable<[TiendeoCore.Store]>
  @objc deinit
}
public class GetStoresByCityAndRetailerRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(cityName: Swift.String, retailerName: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String)
  @objc deinit
}
public class AddEmptyList {
  public init(shoppingListsRepository: TiendeoCore.ShoppingListsRepository)
  public func execute(_ requestValues: TiendeoCore.AddEmptyListRequestValues) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  @objc deinit
}
public class AddEmptyListRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String)
  @objc deinit
}
public protocol LogEvent {
  typealias ParametersType = [Swift.String : Any]
  var name: Swift.String { get }
  var parameters: Self.ParametersType { get }
}
public struct CoreAnalyticsService {
  public static func log(event: TiendeoCore.LogEvent)
  public static func basicParameters(appUserId: Swift.String?, cityName: Swift.String?, countryCode: Swift.String?) -> [Swift.String : Any]
}
public struct ShoppingListsDataRepository : TiendeoCore.ShoppingListsRepository {
  public init(remoteDataSource: TiendeoCore.ShoppingListsDataSource, localDataSource: TiendeoCore.ShoppingListsDataSource)
  public func getShoppingList(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList?>
  public func addEmptyList(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  public func addProductToList(product: TiendeoCore.Product, shoppingList: TiendeoCore.ShoppingList, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  public func deleteShoppingLists(countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool>
  public func deleteProducts(with ids: [Swift.String], in shoppingListId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList>
}
public protocol TiendeoCountriesRepository {
  func getTiendeoCountries() -> RxSwift.Observable<[TiendeoCore.TiendeoCountry]>
  func getTiendeoCountryByCountryCode(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.TiendeoCountry?>
}
public struct Store {
  public let storeId: Swift.String
  public let name: Swift.String?
  public let address: Swift.String?
  public let lat: Swift.Float?
  public let lon: Swift.Float?
  public let distance: Swift.Float?
  public let phone: Swift.String?
  public let retailer: TiendeoCore.Retailer?
  public var schedulesStrings: [Swift.String]?
  public var postcode: Swift.String?
  public var city: Swift.String?
  public let catalogs: [TiendeoCore.Catalog]?
  public let withCatalogs: Swift.Bool
  public static var storeIdMappingName: Swift.String
  public static var nameMappingName: Swift.String
  public static var retailerMappingName: Swift.String
  public static var addressMappingName: Swift.String
  public static var latMappingName: Swift.String
  public static var lonMappingName: Swift.String
  public static var distanceMappingName: Swift.String
  public static var phoneMappingName: Swift.String
  public static var schedulesStringsMappingName: Swift.String
  public static var postcode: Swift.String
  public static var city: Swift.String
  public static var catalogs: Swift.String
  public static var withCatalogs: Swift.String
  public init(storeId: Swift.String, name: Swift.String?, address: Swift.String?, lat: Swift.Float?, lon: Swift.Float?, distance: Swift.Float?, phone: Swift.String?, retailer: TiendeoCore.Retailer?, schedulesStrings: [Swift.String]?, postcode: Swift.String?, city: Swift.String?, catalogs: [TiendeoCore.Catalog], withCatalogs: Swift.Bool)
}
public struct PromoCouponUser {
  public let id: Swift.String
  public let userId: Swift.String
  public let country: Swift.String
  public let loyaltyCardId: Swift.String
  public let promoCouponId: Swift.String
  public let externalId: Swift.String
  public let externalData: Swift.String
  public init(id: Swift.String, userId: Swift.String, country: Swift.String, loyaltyCardId: Swift.String, promoCouponId: Swift.String, externalId: Swift.String, externalData: Swift.String)
}
public class SendNavigationStats {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SendNavigationStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SendNavigationStatsRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var navigationStatsEntity: TiendeoCore.NavigationStatsEntity
  public init(baseUrl: Swift.String, navigationStatsEntity: TiendeoCore.NavigationStatsEntity)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers public class CouponListCollectionViewCell : TiendeoCore.ContentListCollectionViewCell {
  @objc override dynamic public func awakeFromNib()
  override public func setupCell(with item: TiendeoCore.ListItem)
  override public func setupCell(with item: TiendeoCore.ListItemProtocol)
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public class ArticleRemoteDataSource : TiendeoCore.ArticleDataSource {
  public init()
  public func getRecommendedArticles(with searchWord: Swift.String, latitude: Swift.Float, longitude: Swift.Float, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Article]>
  @objc deinit
}
public class GetSearchProductResults {
  public init(searchResultsRepository: TiendeoCore.SearchResultsRepository)
  public func execute(_ requestValues: TiendeoCore.GetSearchResultRequestValues) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  @objc deinit
}
public class GetLoyaltyCards {
  public init(loyaltyCardsRepository: TiendeoCore.LoyaltyCardsRepository)
  public func execute(_ requestValues: TiendeoCore.GetLoyaltyCardsRequestValues) -> RxSwift.Observable<[TiendeoCore.LoyaltyCard]>
  @objc deinit
}
public class GetLoyaltyCardsRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String)
  @objc deinit
}
public struct Product {
  public let id: Swift.String
  public let name: Swift.String
  public let checked: Swift.Bool
  public let category: Swift.String
  public let offers: Swift.Int
  public init(id: Swift.String, name: Swift.String, checked: Swift.Bool, category: Swift.String, offers: Swift.Int)
}
extension Product {
  public func transformToSearchResult() -> TiendeoCore.SearchResult
}
public enum ChipType : Swift.String {
  case outline
  case fill
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
public struct Chip {
  public let type: TiendeoCore.ChipType
  public let text: Swift.String
  public init(type: TiendeoCore.ChipType, text: Swift.String)
}
public class SendArticleClipEventStats {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SendArticleClipEventStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SendArticleClipEventStatsRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var articleClipEventStatsEntity: TiendeoCore.ArticleClipEventStatsEntity
  public init(baseUrl: Swift.String, articleClipEventStatsEntity: TiendeoCore.ArticleClipEventStatsEntity)
  @objc deinit
}
public protocol ArticleRepository {
  func getRecommendedArticles(with searchWord: Swift.String, latitude: Swift.Float, longitude: Swift.Float, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Article]>
}
public class StatsDataRepository : TiendeoCore.StatsRepository {
  public init(remoteDataSource: TiendeoCore.StatsDataSource, localDataSource: TiendeoCore.StatsDataSource)
  public func consent(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  public func extractUserData(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  public func deleteUserData(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendEventStats(baseUrl: Swift.String, inputStats: TiendeoCore.InputStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendNavigationStats(baseUrl: Swift.String, navigationStatsEntity: TiendeoCore.NavigationStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendArticleClipEventStats(baseUrl: Swift.String, articleClipEventStatsEntity: TiendeoCore.ArticleClipEventStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendCatalogStats(baseUrl: Swift.String, openingStatsEntity: TiendeoCore.OpeningStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendTimeStats(baseUrl: Swift.String, readingStatsEntity: TiendeoCore.ReadingStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendArticleBuyStats(baseUrl: Swift.String, articleStatsEntity: TiendeoCore.ArticleStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendArticleShowStats(baseUrl: Swift.String, articleStatsEntity: TiendeoCore.ArticleStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendCatalogAdBottomStats(baseUrl: Swift.String, catalogEventStatsEntity: TiendeoCore.CatalogEventStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendCatalogToolbarStats(baseUrl: Swift.String, catalogEventStatsEntity: TiendeoCore.CatalogEventStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendNotificationEventStats(baseUrl: Swift.String, notificationStatsEventEntity: TiendeoCore.NotificationStatsEventEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendStoreOpeningStats(baseUrl: Swift.String, storeStatsEntity: TiendeoCore.StoreStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendDeepLinkOnBoardStats(baseUrl: Swift.String, deepLinkStatsEntity: TiendeoCore.DeepLinkStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendOpenAppStats(baseUrl: Swift.String, openAppStatsEntity: TiendeoCore.OpenAppStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func savePrintStat(printStatEntity: TiendeoCore.PrintStatEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendPrintStats() -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public protocol AlertsRepository {
  func getAlerts(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Alert]>
}
public class GetOffersByLatLonAndSearchWord {
  public init(catalogRepository: TiendeoCore.CatalogRepository)
  public func execute(_ requestValues: TiendeoCore.GetOffersByLatLonAndSearchWordRequestValues) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  @objc deinit
}
public class GetOffersByLatLonAndSearchWordRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(latitude: Swift.Float, longitude: Swift.Float, searchWord: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String)
  @objc deinit
}
@objc @_inheritsConvenienceInitializers open class PassThroughView : UIKit.UIView {
  @objc override dynamic open func point(inside point: CoreGraphics.CGPoint, with event: UIKit.UIEvent?) -> Swift.Bool
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public struct TiendeoCountriesLocalDataSource : TiendeoCore.TiendeoCountriesDataSource {
  public init()
  public func getTiendeoCountries() throws -> RxSwift.Observable<[TiendeoCore.TiendeoCountry]>
  public func getTiendeoCountryByCountryCode(countryCode: Swift.String) throws -> RxSwift.Observable<TiendeoCore.TiendeoCountry?>
}
@objc @_inheritsConvenienceInitializers public class TagBoxLocalEntity : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
public class SendDeepLinkOnBoardStats {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SendDeepLinkOnBoardStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SendDeepLinkOnBoardStatsRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var deepLinkStatsEntity: TiendeoCore.DeepLinkStatsEntity
  public init(baseUrl: Swift.String, deepLinkStatsEntity: TiendeoCore.DeepLinkStatsEntity)
  @objc deinit
}
public protocol CollectionViewCellProtocol {
  static func registerCellCoreBundle(collectionView: UIKit.UICollectionView)
  static func registerCell(collectionView: UIKit.UICollectionView, bundle: Foundation.Bundle?)
  static func reuseIdentifier() -> Swift.String
}
extension CollectionViewCellProtocol where Self : UIKit.UICollectionViewCell {
  public static func registerCellCoreBundle(collectionView: UIKit.UICollectionView)
  public static func registerCell(collectionView: UIKit.UICollectionView, bundle: Foundation.Bundle?)
  public static func reuseIdentifier() -> Swift.String
}
public struct SearchResultSection {
  public let name: Swift.String
  public let items: [TiendeoCore.SearchResult]
  public init(name: Swift.String, items: [TiendeoCore.SearchResult])
}
public class GetDefaultStore {
  public init(storesRepository: TiendeoCore.StoresRepository)
  public func execute(_ requestValues: TiendeoCore.GetDefaultStoreRequestValues) -> RxSwift.Observable<TiendeoCore.Store?>
  @objc deinit
}
public class GetDefaultStoreRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String)
  @objc deinit
}
public protocol ShoppingListsRepository {
  func getShoppingList(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList?>
  func addEmptyList(countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  func addProductToList(product: TiendeoCore.Product, shoppingList: TiendeoCore.ShoppingList, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList>
  func deleteShoppingLists(countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool>
  func deleteProducts(with ids: [Swift.String], in shoppingListId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.ShoppingList>
}
@_inheritsConvenienceInitializers @objc(ChipLocalEntity) public class ChipLocalEntity : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
public class SendArticleShowStats {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SendArticleShowStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SendArticleShowStatsRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var articleStatsEntity: TiendeoCore.ArticleStatsEntity
  public init(baseUrl: Swift.String, articleStatsEntity: TiendeoCore.ArticleStatsEntity)
  @objc deinit
}
public class GetSavedTagBoxesByCountry {
  public init(tagBoxesRepository: TiendeoCore.TagBoxesRepository)
  public func execute(_ requestValues: TiendeoCore.GetSavedTagBoxesByCountryRequestValues) -> RxSwift.Observable<[TiendeoCore.TagBox]>
  @objc deinit
}
public class GetSavedTagBoxesByCountryRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String)
  @objc deinit
}
public class PromoCoupon {
  final public let id: Swift.String
  final public let status: Swift.String
  final public let promoCouponType: TiendeoCore.PromoCouponType
  final public let startDate: Swift.String
  final public let endDate: Swift.String
  final public let publicationStartDateTimestamp: Swift.Double
  final public let publicationEndDateTimestamp: Swift.Double
  final public let shortDescription: Swift.String
  final public let longDescription: Swift.String
  final public let imageUrl: Swift.String
  final public let title: Swift.String
  final public let amount: Swift.String
  final public let amountFormatted: Swift.String
  final public let amountNumber: Swift.Double
  final public let units: Swift.String
  final public let url: Swift.String
  final public let buttonText: Swift.String
  final public let externalId: Swift.String?
  final public let readableStartDate: Swift.String
  final public let readableEndDate: Swift.String
  public var isSaved: Swift.Bool
  public var retailers: [TiendeoCore.PromoCouponRetailer]?
  public var discountType: Swift.String
  public init(id: Swift.String, status: Swift.String, promoCouponType: TiendeoCore.PromoCouponType, startDate: Swift.String, endDate: Swift.String, publicationStartDateTimestamp: Swift.Double, publicationEndDateTimestamp: Swift.Double, shortDescription: Swift.String, longDescription: Swift.String, imageUrl: Swift.String, title: Swift.String, amount: Swift.String, amountFormatted: Swift.String, amountNumber: Swift.Double, units: Swift.String, url: Swift.String, buttonText: Swift.String, externalId: Swift.String?, readableStartDate: Swift.String, readableEndDate: Swift.String, isSaved: Swift.Bool, retailers: [TiendeoCore.PromoCouponRetailer]?, discountType: Swift.String)
  @objc deinit
}
public protocol ConfigDataSource {
  func getGlobalIntegrations(countryCode: Swift.String) throws -> RxSwift.Observable<TiendeoCore.GlobalIntegrationsWrapper?>
  func getViewerProIntegrations(countryCode: Swift.String, provider: Swift.String) throws -> RxSwift.Observable<TiendeoCore.ViewerProIntegrations>
}
public protocol MallRepository {
  func getMalls(with filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.MallItem]>
  func getMall(with id: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.MallItem>
  func getStores(with mallId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Store]>
}
public enum CatalogsListItemType {
  case header
  case catalog
  case coupon
  case adBanner
  case favoriteBanner
  case mallBanner
  public static func == (a: TiendeoCore.CatalogsListItemType, b: TiendeoCore.CatalogsListItemType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol CatalogsListItem : TiendeoCore.ListItemProtocol {
  var type: TiendeoCore.CatalogsListItemType { get set }
}
extension UIColor {
  convenience public init(hex: Swift.String)
}
extension UIColor {
  public class var tndLightGrey0: UIKit.UIColor {
    get
  }
  public class var tndLightGrey72: UIKit.UIColor {
    get
  }
  public class var tndReddish: UIKit.UIColor {
    get
  }
  public class var tndMediumGrey: UIKit.UIColor {
    get
  }
  public class var tndWhite92: UIKit.UIColor {
    get
  }
  public class var tndAlmostBlack: UIKit.UIColor {
    get
  }
  public class var tndTealish: UIKit.UIColor {
    get
  }
  public class var tndBlack: UIKit.UIColor {
    get
  }
  public class var tndLightGrey: UIKit.UIColor {
    get
  }
  public class var tndSmoke: UIKit.UIColor {
    get
  }
  public class var tndLightGreyTwo: UIKit.UIColor {
    get
  }
  public class var mediumGrey8: UIKit.UIColor {
    get
  }
  public class var tndOrange: UIKit.UIColor {
    get
  }
  public class var rouge: UIKit.UIColor {
    get
  }
  public class var leaf: UIKit.UIColor {
    get
  }
  public class var mediumPurple: UIKit.UIColor {
    get
  }
  public class var wineRed: UIKit.UIColor {
    get
  }
  public class var mossyGreen: UIKit.UIColor {
    get
  }
  public class var grape: UIKit.UIColor {
    get
  }
}
public struct OpenAppStatsEntity {
  public var openingFromBackground: Swift.Bool
  public var userToken: Swift.String
  public var version: Swift.String
  public let latitude: Swift.Float?
  public let longitude: Swift.Float?
  public var selectedLatitude: Swift.Float?
  public var selectedLongitude: Swift.Float?
  public var selectedCity: Swift.String?
  public var locationType: Swift.String?
  public var eventName: Swift.String?
  public var provider: Swift.String?
  public let clientTimeStamp: Swift.String
  public let timeZoneOffset: Swift.Int
  public let platform: Swift.String
}
extension InputStatsEntity {
  public func transformToOpenAppStatsEntity(openingFromBackground: Swift.Bool, selectedCity: Swift.String?) -> TiendeoCore.OpenAppStatsEntity
}
public struct CityLocalEntity {
  public var id: Swift.String
  public var name: Swift.String
  public var lat: Swift.Float
  public var lon: Swift.Float
  public init(id: Swift.String, name: Swift.String, lat: Swift.Float, lon: Swift.Float)
  public static func map(dictionary: [Swift.String : Any]) -> TiendeoCore.CityLocalEntity?
  public func transformToDomain() -> TiendeoCore.City
}
extension City {
  public func transformToLocalEntity() -> TiendeoCore.CityLocalEntity?
}
@objc @_inheritsConvenienceInitializers public class SliderButtonListCollectionViewCell : TiendeoCore.SliderListCollectionViewCell {
  public var didPressButton: ((TiendeoCore.SliderViewEntity) -> Swift.Void)?
  override public func setupCell(with item: TiendeoCore.ListItem)
  public class func registerSliderBigButtonCell(collectionView: UIKit.UICollectionView)
  public class func sliderBigButtonCellReuseIdenitifer() -> Swift.String
  @objc deinit
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
}
public class GetStoreDetailById {
  public init(storeDetailRepository: TiendeoCore.StoreDetailRepository)
  public func execute(_ requestValues: TiendeoCore.GetStoreDetailByIdRequestValues) -> RxSwift.Observable<TiendeoCore.StoreDetail>
  @objc deinit
}
public class GetStoreDetailByIdRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(id: Swift.String, countryCode: Swift.String)
  @objc deinit
}
public struct LoyaltyCardsDataRepository : TiendeoCore.LoyaltyCardsRepository {
  public init(remoteDataSource: TiendeoCore.LoyaltyCardsDataSource, localDataSource: TiendeoCore.LoyaltyCardsDataSource)
  public func getLoyaltyCards(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.LoyaltyCard]>
  public func createLoyaltyCard(loyaltyCard: TiendeoCore.LoyaltyCard, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  public func updateLoyaltyCard(loyaltyCard: TiendeoCore.LoyaltyCard, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  public func deleteLoyaltyCard(with id: Swift.String) -> RxSwift.Observable<Swift.Bool>
  public func syncLoyaltyCards(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.LoyaltyCard]>
  public func getRecommendedLoyaltyCards(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.RecommendedLoyaltyCard]>
  public func addPromoCouponUserWithLoyaltyCard(promoCouponUser: TiendeoCore.PromoCouponUser, loyaltyCard: TiendeoCore.LoyaltyCard, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  public func deleteAllLoyaltyCards() -> RxSwift.Observable<Swift.Bool>
}
public protocol ListSection {
  var sectionItem: TiendeoCore.ListItemProtocol? { get set }
  var cellItems: [TiendeoCore.ListItemProtocol] { get set }
}
public protocol ArticleDataSource {
  func getRecommendedArticles(with searchWord: Swift.String, latitude: Swift.Float, longitude: Swift.Float, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Article]>
}
public struct CitiesDataRepository : TiendeoCore.CitiesRepository {
  public init(dataSources: [TiendeoCore.CitiesDataSource])
  public func getCity(with id: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.City>
}
public protocol StatsRequestValues {
  var baseUrl: Swift.String { get set }
}
public class SendCatalogStats {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SendCatalogStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SendCatalogStatsRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var openingStatsEntity: TiendeoCore.OpeningStatsEntity
  public init(baseUrl: Swift.String, openingStats: TiendeoCore.OpeningStatsEntity)
  @objc deinit
}
@_inheritsConvenienceInitializers @objc(GeofenceLocal) public class GeofenceLocal : CoreData.NSManagedObject {
  @objc deinit
  @objc override dynamic public init(entity: CoreData.NSEntityDescription, insertInto context: CoreData.NSManagedObjectContext?)
}
public protocol LoyaltyCardsDataSource {
  func getLoyaltyCards(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.LoyaltyCard]>
  func createLoyaltyCard(loyaltyCard: TiendeoCore.LoyaltyCard, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  func updateLoyaltyCard(loyaltyCard: TiendeoCore.LoyaltyCard, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  func deleteLoyaltyCard(with id: Swift.String) -> RxSwift.Observable<Swift.Bool>
  func syncLoyaltyCards(loyaltyCards: [TiendeoCore.LoyaltyCard], countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.LoyaltyCard]>
  func rewriteLoyaltyCards(loyaltyCards: [TiendeoCore.LoyaltyCard], countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.LoyaltyCard]>
  func getRecommendedLoyaltyCards(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.RecommendedLoyaltyCard]>
  func addPromoCouponUserWithLoyaltyCard(promoCouponUser: TiendeoCore.PromoCouponUser, loyaltyCard: TiendeoCore.LoyaltyCard, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.LoyaltyCard>
  func deleteAllLoyaltyCards() -> RxSwift.Observable<Swift.Bool>
}
public class SendCatalogAdBottomStats {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SendCatalogAdBottomStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SendCatalogAdBottomStatsRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var catalogEventStatsEntity: TiendeoCore.CatalogEventStatsEntity
  public init(baseUrl: Swift.String, catalogEventStatsEntity: TiendeoCore.CatalogEventStatsEntity)
  @objc deinit
}
public struct BannerEntity {
  public let row: Swift.Int
  public let item: TiendeoCore.ListItem
  public static func createBanner(basicInfo: TiendeoCore.BannerBasicInfoEntity, bannerView: TiendeoCore.BannerViewEntity) -> TiendeoCore.BannerEntity
}
public class SavePrintStat {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SavePrintStatRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SavePrintStatRequestValues : TiendeoCore.BaseRequestValues {
  public var printStatEntity: TiendeoCore.PrintStatEntity
  public init(printStatEntity: TiendeoCore.PrintStatEntity)
  @objc deinit
}
public class ArticleDataRepository : TiendeoCore.ArticleRepository {
  public init(remoteDataSource: TiendeoCore.ArticleDataSource)
  public func getRecommendedArticles(with searchWord: Swift.String, latitude: Swift.Float, longitude: Swift.Float, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Article]>
  @objc deinit
}
public struct FavoriteViewEntity {
  public var id: Swift.String?
  public let retailer: TiendeoCore.RetailerViewEntity
  public let city: Swift.String?
  public let catalogs: [Swift.String]?
  public var suggested: Swift.Bool
  public init(id: Swift.String?, retailer: TiendeoCore.RetailerViewEntity, city: Swift.String?, catalogs: [Swift.String]?, suggested: Swift.Bool)
  public func transformToFavorite(id: Swift.String, lat: Swift.Float?, lon: Swift.Float?, city: Swift.String?, type: Swift.Int?) -> TiendeoCore.Favorite
}
extension Favorite {
  public func transformToUi(staticUrl: Swift.String) -> TiendeoCore.FavoriteViewEntity?
}
extension Retailer {
  public func transformToFavoriteUi(staticUrl: Swift.String) -> TiendeoCore.FavoriteViewEntity?
}
extension CatalogViewEntity {
  public func transformToFavoriteUI(cityName: Swift.String?) -> TiendeoCore.FavoriteViewEntity?
}
extension Sequence where Self.Element == TiendeoCore.Favorite {
  public func transformToUi(staticUrl: Swift.String) -> [TiendeoCore.FavoriteViewEntity]
}
extension Sequence where Self.Element == TiendeoCore.Retailer {
  public func transformToFavoriteUi(staticUrl: Swift.String) -> [TiendeoCore.FavoriteViewEntity]
}
public struct FavoritesRemoteDataSource : TiendeoCore.FavoritesDataSource {
  public init()
  public func getFavorites(countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<[TiendeoCore.Favorite]>
  public func addFavorites(favorites: [TiendeoCore.Favorite], countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<Swift.Bool>
  public func deleteFavoriteBy(favoriteId: Swift.String, countryCode: Swift.String, appUserId: Swift.String) -> RxSwift.Observable<Swift.Bool>
}
public class GetTiendeoCountryByCountryCode {
  public init(tiendeoCountriesRepository: TiendeoCore.TiendeoCountriesRepository)
  public func execute(_ requestValues: TiendeoCore.GetTiendeoCountryByCountryCodeRequestValues) -> RxSwift.Observable<TiendeoCore.TiendeoCountry?>
  @objc deinit
}
public class GetTiendeoCountryByCountryCodeRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String)
  @objc deinit
}
public protocol StoreDetailDataSource {
  func getStoreDetail(with id: Swift.String, countryCode: Swift.String) throws -> RxSwift.Observable<TiendeoCore.StoreDetail?>
}
public protocol StatsDataSource {
  func consent(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  func extractUserData(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  func deleteUserData(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  func sendEventStats(baseUrl: Swift.String, inputStats: TiendeoCore.InputStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendNavigationStats(baseUrl: Swift.String, navigationStatsEntity: TiendeoCore.NavigationStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendArticleEventStats(baseUrl: Swift.String, articleClipEventStatsEntity: TiendeoCore.ArticleClipEventStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendNotificationEventStats(baseUrl: Swift.String, notificationStatsEventEntity: TiendeoCore.NotificationStatsEventEntity) -> RxSwift.Observable<Swift.Bool>
  func sendCatalogStats(baseUrl: Swift.String, openingStatsEntity: TiendeoCore.OpeningStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendTimeStats(baseUrl: Swift.String, readingStatsEntity: TiendeoCore.ReadingStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendArticleBuyStats(baseUrl: Swift.String, articleStatsEntity: TiendeoCore.ArticleStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendArticleShowStats(baseUrl: Swift.String, articleStatsEntity: TiendeoCore.ArticleStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendCatalogAdBottomStats(baseUrl: Swift.String, catalogEventStatsEntity: TiendeoCore.CatalogEventStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendCatalogToolbarStats(baseUrl: Swift.String, catalogEventStatsEntity: TiendeoCore.CatalogEventStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendStoreOpeningStats(baseUrl: Swift.String, storeStatsEntity: TiendeoCore.StoreStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendDeepLinkOnBoardStats(baseUrl: Swift.String, deepLinkStatsEntity: TiendeoCore.DeepLinkStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendOpenAppStats(baseUrl: Swift.String, openAppStatsEntity: TiendeoCore.OpenAppStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func savePrintStat(printStatEntity: TiendeoCore.PrintStatEntity) -> RxSwift.Observable<Swift.Bool>
  func getSavedPrintStats() -> RxSwift.Observable<[TiendeoCore.PrintStatEntity]>
  func deletePrintStats(with ids: [Swift.String]) -> RxSwift.Observable<Swift.Bool>
  func sendSavedPrintStats(baseUrl: Swift.String, printStats: [TiendeoCore.PrintStatEntity]) -> RxSwift.Observable<[Swift.String : Swift.Bool]>
}
public class GetSearchAllResults {
  public init(searchResultsRepository: TiendeoCore.SearchResultsRepository)
  public func execute(_ requestValues: TiendeoCore.GetSearchResultRequestValues) -> RxSwift.Observable<[TiendeoCore.SearchResultSection]>
  @objc deinit
}
extension CALayer {
  public func addShadow(alpha: CoreGraphics.CGFloat, shadowAlpha: Swift.Float)
  public func roundCorners(radius: CoreGraphics.CGFloat)
}
public protocol ListCollectionViewCellProtocol : TiendeoCore.CollectionViewCellProtocol {
  func setupCell(with item: TiendeoCore.ListItem)
  func setupCell(with item: TiendeoCore.ListItemProtocol)
}
public class SendTimeStats {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.SendTimeStatsRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class SendTimeStatsRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var readingStatsEntity: TiendeoCore.ReadingStatsEntity
  public init(baseUrl: Swift.String, readingStatsEntity: TiendeoCore.ReadingStatsEntity)
  @objc deinit
}
public struct FiltersDataRepository : TiendeoCore.FiltersRepository {
  public init(dataSources: [TiendeoCore.FiltersDataSource])
  public func getFilters(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Filter]>
  public func getNewFilters(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Filter]>
}
public enum CouponType {
  case offer
  case code
  public static func == (a: TiendeoCore.CouponType, b: TiendeoCore.CouponType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public struct Coupon {
  public let couponId: Swift.String
  public let catalogId: Swift.String
  public let storeId: Swift.String
  public let shortText: Swift.String
  public let hasImage: Swift.Bool
  public let type: TiendeoCore.CouponType
  public let color: Swift.String
  public init(couponId: Swift.String, catalogId: Swift.String, storeId: Swift.String, shortText: Swift.String, hasImage: Swift.Bool, type: TiendeoCore.CouponType, color: Swift.String)
  public func getSmallImageUrl(imageTemplate: Swift.String) -> Swift.String
  public func getExternalUrl(pathWeb: Swift.String, pathCoupons: Swift.String, provider: Swift.String) -> Swift.String
}
public class TagBoxesLocalDataSource : TiendeoCore.TagBoxesDataSource {
  public init()
  public func getTagBoxesByCatalogIdPaginated(catalogId: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.TagBox]>
  public func getSavedTagBoxes(countryCode: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.TagBox]>
  public func getSavedTagboxesByCatalogId(catalogId: Swift.String) throws -> RxSwift.Observable<[TiendeoCore.TagBox]>
  public func saveTagBox(tagBox: TiendeoCore.TagBox, countryCode: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  public func deleteTagBox(tagBoxId: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  public func sendTagBoxPixelStats(with url: Swift.String) -> RxSwift.Observable<Swift.Bool?>
  @objc deinit
}
public struct AppInfo {
  public let userToken: Swift.Int
  public let senderToken: Swift.String?
  public let integrationName: Swift.String?
  public let uuid: Swift.String?
  public let wifiMAC: Swift.String?
  public let origin: Swift.String?
  public let subori: Swift.String?
  public let lastUpdate: Swift.Int?
  public init(userToken: Swift.Int, senderToken: Swift.String? = nil, integrationName: Swift.String? = nil, uuid: Swift.String? = nil, wifiMAC: Swift.String? = nil, origin: Swift.String? = nil, subori: Swift.String? = nil, lastUpdate: Swift.Int? = nil)
}
public struct ViewerProIntegrations {
  public var config: TiendeoCore.Config?
  public var integration: TiendeoCore.ViewerProIntegration?
  public init(config: TiendeoCore.Config?, integration: TiendeoCore.ViewerProIntegration?)
}
public protocol AppUserRepository {
  func getAppUser(uuid: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.AppUser?>
  func refreshInfo(countryCode: Swift.String, appInfo: TiendeoCore.AppInfo) -> RxSwift.Observable<Swift.Bool>
}
public struct TCategory {
  public let id: Swift.String?
  public let name: Swift.String?
  public let affinity: Swift.Int?
  public let top: Swift.Int?
  public init(id: Swift.String?, name: Swift.String?, affinity: Swift.Int?, top: Swift.Int?)
}
extension TCategory {
  public func transformToSearchResult() -> TiendeoCore.SearchResult?
}
extension Sequence where Self.Element == TiendeoCore.TCategory {
  public func transformToSearchResult() -> [TiendeoCore.SearchResult]
}
public enum CustomBannerType {
  case favorite
  case mall
  public static func == (a: TiendeoCore.CustomBannerType, b: TiendeoCore.CustomBannerType) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public protocol CustomBannerViewEntity {
  var type: TiendeoCore.CustomBannerType { get set }
}
public struct FavoriteBannerViewEntity : TiendeoCore.CustomBannerViewEntity {
  public let title1: Swift.String?
  public let title2: Swift.String?
  public let textButton: Swift.String?
  public let shouldShowButton: Swift.Bool?
  public let retailerName: Swift.String?
  public let cityName: Swift.String?
  public var type: TiendeoCore.CustomBannerType
  public init(title1: Swift.String? = nil, title2: Swift.String? = nil, textButton: Swift.String? = nil, shouldShowButton: Swift.Bool? = nil, retailerName: Swift.String? = nil, cityName: Swift.String? = nil)
}
public struct MallBannerViewEntity : TiendeoCore.CustomBannerViewEntity {
  public let mall: TiendeoCore.MallItemViewEntity
  public let didPressAddressButton: ((TiendeoCore.MallBannerViewEntity) -> Swift.Void)
  public let didPressPhoneButton: ((TiendeoCore.MallBannerViewEntity) -> Swift.Void)
  public var type: TiendeoCore.CustomBannerType
  public init(mall: TiendeoCore.MallItemViewEntity, didPressAddressButton: @escaping ((TiendeoCore.MallBannerViewEntity) -> Swift.Void), didPressPhoneButton: @escaping ((TiendeoCore.MallBannerViewEntity) -> Swift.Void))
}
public class GetLatestSearchLoyaltyCardsResults {
  public init(searchResultsRepository: TiendeoCore.SearchResultsRepository)
  public func execute(_ requestValues: TiendeoCore.GetLatestSearchResultRequestValues) -> RxSwift.Observable<[TiendeoCore.SearchResult]>
  @objc deinit
}
public struct CatalogDataRepository : TiendeoCore.CatalogRepository {
  public init(dataSources: [TiendeoCore.CatalogDataSource])
  public func getCatalogs(with filterRequest: TiendeoCore.FilterRequestParams, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getCatalogById(catalogId: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<TiendeoCore.Catalog>
  public func getRelatedCatalogs(catalogId: Swift.String, latitude: Swift.Float, longitude: Swift.Float, search: Swift.String, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getCatalogs(latitude: Swift.Float, longitude: Swift.Float, searchWord: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getOffers(latitude: Swift.Float, longitude: Swift.Float, searchWord: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getOffers(with cityName: Swift.String, searchWord: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getCatalogs(with storeId: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Catalog]>
  public func getRecommendedCatalogs(latitude: Swift.Float, longitude: Swift.Float, retailerName: Swift.String, start: Swift.Int, count: Swift.Int, countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Catalog]>
}
public struct StatsRemoteDataSource : TiendeoCore.StatsDataSource {
  public init()
  public func consent(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  public func extractUserData(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  public func deleteUserData(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendEventStats(baseUrl: Swift.String, inputStats: TiendeoCore.InputStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendNavigationStats(baseUrl: Swift.String, navigationStatsEntity: TiendeoCore.NavigationStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendArticleEventStats(baseUrl: Swift.String, articleClipEventStatsEntity: TiendeoCore.ArticleClipEventStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendCatalogStats(baseUrl: Swift.String, openingStatsEntity: TiendeoCore.OpeningStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendTimeStats(baseUrl: Swift.String, readingStatsEntity: TiendeoCore.ReadingStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendArticleBuyStats(baseUrl: Swift.String, articleStatsEntity: TiendeoCore.ArticleStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendArticleShowStats(baseUrl: Swift.String, articleStatsEntity: TiendeoCore.ArticleStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendCatalogAdBottomStats(baseUrl: Swift.String, catalogEventStatsEntity: TiendeoCore.CatalogEventStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendCatalogToolbarStats(baseUrl: Swift.String, catalogEventStatsEntity: TiendeoCore.CatalogEventStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendNotificationEventStats(baseUrl: Swift.String, notificationStatsEventEntity: TiendeoCore.NotificationStatsEventEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendStoreOpeningStats(baseUrl: Swift.String, storeStatsEntity: TiendeoCore.StoreStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendDeepLinkOnBoardStats(baseUrl: Swift.String, deepLinkStatsEntity: TiendeoCore.DeepLinkStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func sendOpenAppStats(baseUrl: Swift.String, openAppStatsEntity: TiendeoCore.OpenAppStatsEntity) -> RxSwift.Observable<Swift.Bool>
  public func savePrintStat(printStatEntity: TiendeoCore.PrintStatEntity) -> RxSwift.Observable<Swift.Bool>
  public func getSavedPrintStats() -> RxSwift.Observable<[TiendeoCore.PrintStatEntity]>
  public func deletePrintStats(with ids: [Swift.String]) -> RxSwift.Observable<Swift.Bool>
  public func sendSavedPrintStats(baseUrl: Swift.String, printStats: [TiendeoCore.PrintStatEntity]) -> RxSwift.Observable<[Swift.String : Swift.Bool]>
}
public protocol StatsRepository {
  func consent(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  func extractUserData(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  func deleteUserData(baseUrl: Swift.String, gdprEntity: TiendeoCore.GdprEntity) -> RxSwift.Observable<Swift.Bool>
  func sendEventStats(baseUrl: Swift.String, inputStats: TiendeoCore.InputStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendNavigationStats(baseUrl: Swift.String, navigationStatsEntity: TiendeoCore.NavigationStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendArticleClipEventStats(baseUrl: Swift.String, articleClipEventStatsEntity: TiendeoCore.ArticleClipEventStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendNotificationEventStats(baseUrl: Swift.String, notificationStatsEventEntity: TiendeoCore.NotificationStatsEventEntity) -> RxSwift.Observable<Swift.Bool>
  func sendCatalogStats(baseUrl: Swift.String, openingStatsEntity: TiendeoCore.OpeningStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendTimeStats(baseUrl: Swift.String, readingStatsEntity: TiendeoCore.ReadingStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendArticleBuyStats(baseUrl: Swift.String, articleStatsEntity: TiendeoCore.ArticleStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendArticleShowStats(baseUrl: Swift.String, articleStatsEntity: TiendeoCore.ArticleStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendCatalogAdBottomStats(baseUrl: Swift.String, catalogEventStatsEntity: TiendeoCore.CatalogEventStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendCatalogToolbarStats(baseUrl: Swift.String, catalogEventStatsEntity: TiendeoCore.CatalogEventStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendStoreOpeningStats(baseUrl: Swift.String, storeStatsEntity: TiendeoCore.StoreStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendDeepLinkOnBoardStats(baseUrl: Swift.String, deepLinkStatsEntity: TiendeoCore.DeepLinkStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func sendOpenAppStats(baseUrl: Swift.String, openAppStatsEntity: TiendeoCore.OpenAppStatsEntity) -> RxSwift.Observable<Swift.Bool>
  func savePrintStat(printStatEntity: TiendeoCore.PrintStatEntity) -> RxSwift.Observable<Swift.Bool>
  func sendPrintStats() -> RxSwift.Observable<Swift.Bool>
}
public struct ViewerProIntegration {
  public var defaultCityId: Swift.String
  public var defaultCityName: Swift.String
  public var defaultCityLat: Swift.Float
  public var defaultCityLon: Swift.Float
  public var showStoresDropDown: Swift.Bool
  public var retailerId: Swift.String
  public var searchWord: Swift.String
  public var countryCode: Swift.String
  public var showLocationSelector: Swift.Bool
  public var showRecommenderInfo: Swift.Bool
  public var showProductTagPopup: Swift.Bool
  public var secondaryColorHex: Swift.String
  public var secondaryFontColorHex: Swift.String
  public var cornerRadius: Swift.Int
  public var showRetailerLabel: Swift.Bool
  public var showClipsButton: Swift.Bool
  public var showExpirationLabel: Swift.Bool
  public var showTitleLabel: Swift.Bool
  public var saveCatalogButton: Swift.Bool
  public var showShare: Swift.Bool
  public var showTagBoxes: Swift.Bool
  public var showStores: Swift.Bool
  public var showRecommenderBottomBar: Swift.Bool
  public var showPageSelector: Swift.Bool
  public var primaryColorHex: Swift.String
  public var primaryFontColorHex: Swift.String
  public var provider: Swift.String
  public var statsProvider: Swift.String
  public var tagButtonColorHex: Swift.String
  public var tagAreaColorHex: Swift.String
  public var adIntersticial: Swift.Bool
  public var adTimeBetweenIntersticial: Swift.Int
  public var adCatalogBottom: Swift.Bool
  public var showPromoCoupons: Swift.Bool
  public var expirationLabelText: Swift.Bool
  public var shouldShowPageAds: Swift.Bool
  public var adPagesPositions: [Swift.Int]
  public var shouldShowProductInfoChips: Swift.Bool
  public var showProductShareAndSaveBlock: Swift.Bool
  public var showProductOffersBlock: Swift.Bool
  public var showClipTutorial: Swift.Bool
  public init(defaultCityId: Swift.String, defaultCityName: Swift.String, defaultCityLat: Swift.Float, defaultCityLon: Swift.Float, showStoresDropDown: Swift.Bool, retailerId: Swift.String, searchWord: Swift.String, countryCode: Swift.String, showLocationSelector: Swift.Bool, showRecommenderInfo: Swift.Bool, showProductTagPopup: Swift.Bool, secondaryColorHex: Swift.String, secondaryFontColorHex: Swift.String, cornerRadius: Swift.Int, showRetailerLabel: Swift.Bool, showClipsButton: Swift.Bool, showExpirationLabel: Swift.Bool, showTitleLabel: Swift.Bool, saveCatalogButton: Swift.Bool, showShare: Swift.Bool, showTagBoxes: Swift.Bool, showStores: Swift.Bool, showRecommenderBottomBar: Swift.Bool, showPageSelector: Swift.Bool, primaryColorHex: Swift.String, primaryFontColorHex: Swift.String, provider: Swift.String, statsProvider: Swift.String, tagButtonColorHex: Swift.String, tagAreaColorHex: Swift.String, adIntersticial: Swift.Bool, adTimeBetweenIntersticial: Swift.Int, adCatalogBottom: Swift.Bool, showPromoCoupons: Swift.Bool, expirationLabelText: Swift.Bool, shouldShowPageAds: Swift.Bool, adPagesPositions: [Swift.Int], shouldShowProductInfoChips: Swift.Bool, showProductShareAndSaveBlock: Swift.Bool, showProductOffersBlock: Swift.Bool, showClipTutorial: Swift.Bool)
}
public class GetStoreByRetailerIdAndClientStoreId {
  public init(storesRepository: TiendeoCore.StoresRepository)
  public func execute(_ requestValues: TiendeoCore.GetStoreByRetailerIdAndClientStoreIdRequestValues) -> RxSwift.Observable<TiendeoCore.Store>
  @objc deinit
}
public class GetStoreByRetailerIdAndClientStoreIdRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(retailerId: Swift.String, clientStoreId: Swift.String, countryCode: Swift.String)
  @objc deinit
}
public class GetPromoCouponById {
  public init(promoCouponRepository: TiendeoCore.PromoCouponRepository)
  public func execute(_ params: TiendeoCore.GetPromoCouponByIdRequestValues) -> RxSwift.Observable<TiendeoCore.PromoCoupon>
  @objc deinit
}
public class GetPromoCouponByIdRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(promoTag: TiendeoCore.PromoTag, countryCode: Swift.String)
  @objc deinit
}
public struct CatalogListItem : TiendeoCore.CatalogsListItem, TiendeoCore.ListItemSelectable {
  public var viewIdentifier: Swift.String
  public var type: TiendeoCore.CatalogsListItemType
  public var didSelectItem: ((TiendeoCore.ListItemSelectable, Swift.Int) -> Swift.Void)
  public var height: CoreGraphics.CGFloat
  public let catalog: TiendeoCore.CatalogViewEntity
  public let didPressFavoriteButton: ((TiendeoCore.CatalogListItem) -> Swift.Void)
  public init(viewIdentifier: Swift.String = CatalogListCollectionViewCell.reuseIdentifier(), type: TiendeoCore.CatalogsListItemType = .catalog, catalog: TiendeoCore.CatalogViewEntity, didSelectItem: @escaping ((TiendeoCore.ListItemSelectable, Swift.Int) -> Swift.Void), didPressFavoriteButton: @escaping ((TiendeoCore.CatalogListItem) -> Swift.Void))
  public init(viewIdentifier: Swift.String = CouponListCollectionViewCell.reuseIdentifier(), type: TiendeoCore.CatalogsListItemType = .coupon, coupon: TiendeoCore.CatalogViewEntity, didSelectItem: @escaping ((TiendeoCore.ListItemSelectable, Swift.Int) -> Swift.Void), didPressFavoriteButton: @escaping ((TiendeoCore.CatalogListItem) -> Swift.Void))
}
extension CatalogViewEntity {
  public func transformToCatalogListItem(didSelectItem: @escaping ((TiendeoCore.ListItemSelectable, Swift.Int) -> Swift.Void), didPressCatalogFavoriteButton: @escaping ((TiendeoCore.CatalogListItem) -> Swift.Void)) -> TiendeoCore.CatalogListItem
}
public struct DeepLinkStatsEntity {
  public let eventName: Swift.String
  public let clientTimeStamp: Swift.String
  public let userToken: Swift.String
  public let sourceType: Swift.String?
  public let sourceElementType: Swift.String?
  public let sourceElementId: Swift.String?
  public let sourceURL: Swift.String?
  public let platform: Swift.String
  public let integration: Swift.String
  public init(eventName: Swift.String, userToken: Swift.String, sourceType: Swift.String?, sourceElementType: Swift.String?, sourceElementId: Swift.String?, sourceURL: Swift.String?, integration: Swift.String)
}
extension String {
  public func isValidEmail() -> Swift.Bool
  public func isValidPhone() -> Swift.Bool
  public func onlyDigits() -> Swift.String
  public func formatSearchInput() -> Swift.String
  public func height(withConstrainedWidth width: CoreGraphics.CGFloat, font: UIKit.UIFont) -> CoreGraphics.CGFloat
  public func width(withConstrainedHeight height: CoreGraphics.CGFloat, font: UIKit.UIFont) -> CoreGraphics.CGFloat
  public func isValidUrl() -> Swift.Bool
  public func stringByAddingPercentEncodingForTiendeo() -> Swift.String
  public func withBoldText(boldPartsOfString: [Swift.String], font: UIKit.UIFont, boldFont: UIKit.UIFont) -> Foundation.NSAttributedString
  public func formatForRequest() -> Swift.String
  public func addingPercentEncodingForTiendeo() -> Swift.String
  public func capitalizingFirstLetter() -> Swift.String
  public func transformToDate() -> Foundation.Date?
  public func transformToDateWithOptionalDecimalPrecision() -> Foundation.Date?
  public func urlQueryEncoding() -> Swift.String?
  public func transformToUndefinedIfNeeded() -> Swift.String
  public func transformToReadableDateString() -> Swift.String
  public func toDouble() -> Swift.Double?
  public func toArrayOfInt() -> [Swift.Int]
  public func toArrayOfString() -> [Swift.String]
  public func formatForSorting() -> Swift.String
}
extension Optional where Wrapped == Swift.String {
  public func transformToStatsFormat() -> Swift.String
}
public struct ViewerProConfigEntity {
  public let urlFacebook: Swift.String
  public let urlTwitter: Swift.String
  public let urlLegalAdv: Swift.String
  public let prefixReplace: Swift.String
  public let prefixStatic: Swift.String
  public let staticsValues: Swift.String
  public let urlLicenses: Swift.String
  public let urlAboutTiendeo: Swift.String
  public let urlConditionsOfUse: Swift.String
  public let urlPrivacyPolicy: Swift.String
  public let rutaWeb: Swift.String
  public let clicksForRate: Swift.Int
  public let adMobLanding: Swift.Bool
  public let staticUrl: Swift.String
  public let baseUrlStatsApi: Swift.String
  public let pathCatalogs: Swift.String
  public let pathCoupons: Swift.String
  public static func map(config: [Swift.String : Any]) -> TiendeoCore.ViewerProConfigEntity?
}
@objc @_inheritsConvenienceInitializers public class SliderListCollectionViewCell : UIKit.UICollectionViewCell, TiendeoCore.ListCollectionViewCellProtocol {
  public var didSelectSliderItem: ((TiendeoCore.SliderItem) -> Swift.Void)?
  public func setupCell(with item: TiendeoCore.ListItem)
  public func setupCell(with item: TiendeoCore.ListItemProtocol)
  @objc override dynamic public init(frame: CoreGraphics.CGRect)
  @objc required dynamic public init?(coder: Foundation.NSCoder)
  @objc deinit
}
public protocol FiltersDataSource {
  func getFilters(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Filter]>
  func getNewFilters(countryCode: Swift.String) -> RxSwift.Observable<[TiendeoCore.Filter]>
}
public class SendTagBoxPixelStats {
  public init(tagBoxesRepository: TiendeoCore.TagBoxesRepository)
  public func execute(_ requestValues: TiendeoCore.SendTagBoxPixelStatsRequestValues) -> RxSwift.Observable<Swift.Bool?>
  @objc deinit
}
public class SendTagBoxPixelStatsRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(tagbox: TiendeoCore.TagBox)
  @objc deinit
}
public class ExtractUserData {
  public init(statsRepository: TiendeoCore.StatsRepository)
  public func execute(_ requestValues: TiendeoCore.ExtractUserDataRequestValues) -> RxSwift.Observable<Swift.Bool>
  @objc deinit
}
public class ExtractUserDataRequestValues : TiendeoCore.StatsRequestValues {
  public var baseUrl: Swift.String
  public var appUserId: Swift.String?
  public var userKey: Swift.String?
  public var userEmail: Swift.String
  public init(baseUrl: Swift.String, appUserId: Swift.String?, userKey: Swift.String?, userEmail: Swift.String)
  @objc deinit
}
public class GetTopProducts {
  public init(productsRepository: TiendeoCore.ProductsRepository)
  public func execute(_ requestValues: TiendeoCore.GetTopProductsRequestValues) -> RxSwift.Observable<[TiendeoCore.Product]>
  @objc deinit
}
public class GetTopProductsRequestValues : TiendeoCore.RequestValues {
  public var countryCode: Swift.String
  public init(countryCode: Swift.String)
  @objc deinit
}
extension TiendeoCore.TagBoxAction : Swift.Equatable {}
extension TiendeoCore.TagBoxAction : Swift.Hashable {}
extension TiendeoCore.ListItemType : Swift.Equatable {}
extension TiendeoCore.ListItemType : Swift.Hashable {}
extension TiendeoCore.SliderType : Swift.Equatable {}
extension TiendeoCore.SliderType : Swift.Hashable {}
extension TiendeoCore.CatalogsListSectionType : Swift.Equatable {}
extension TiendeoCore.CatalogsListSectionType : Swift.Hashable {}
extension TiendeoCore.PromoCouponType : Swift.Equatable {}
extension TiendeoCore.PromoCouponType : Swift.Hashable {}
extension TiendeoCore.PromoCouponType : Swift.RawRepresentable {}
extension TiendeoCore.RepositoryErrors : Swift.Equatable {}
extension TiendeoCore.RepositoryErrors : Swift.Hashable {}
extension TiendeoCore.RepositoryErrors : Swift.RawRepresentable {}
extension TiendeoCore.FilterType : Swift.Equatable {}
extension TiendeoCore.FilterType : Swift.Hashable {}
extension TiendeoCore.FilterType : Swift.RawRepresentable {}
extension TiendeoCore.SliderItemType : Swift.Equatable {}
extension TiendeoCore.SliderItemType : Swift.Hashable {}
extension TiendeoCore.ChipType : Swift.Equatable {}
extension TiendeoCore.ChipType : Swift.Hashable {}
extension TiendeoCore.ChipType : Swift.RawRepresentable {}
extension TiendeoCore.CatalogsListItemType : Swift.Equatable {}
extension TiendeoCore.CatalogsListItemType : Swift.Hashable {}
extension TiendeoCore.CouponType : Swift.Equatable {}
extension TiendeoCore.CouponType : Swift.Hashable {}
extension TiendeoCore.CustomBannerType : Swift.Equatable {}
extension TiendeoCore.CustomBannerType : Swift.Hashable {}
